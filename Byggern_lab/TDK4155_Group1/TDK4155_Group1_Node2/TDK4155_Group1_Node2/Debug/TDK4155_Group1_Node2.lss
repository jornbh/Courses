
TDK4155_Group1_Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035a  00800200  00002190  00002224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080055a  0080055a  0000257e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000257e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004d0  00000000  00000000  000025da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034f9  00000000  00000000  00002aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001763  00000000  00000000  00005fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000236d  00000000  00000000  00007706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b88  00000000  00000000  00009a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d17  00000000  00000000  0000a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002017  00000000  00000000  0000b313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003c8  00000000  00000000  0000d32a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c3       	rjmp	.+1670   	; 0x690 <__vector_2>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0e c6       	rjmp	.+3100   	; 0xc9e <__vector_32>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b c6       	rjmp	.+3190   	; 0xd04 <__vector_35>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_39>
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_50>
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	01 09       	sbc	r16, r1
      e6:	53 09       	sbc	r21, r3
      e8:	53 09       	sbc	r21, r3
      ea:	53 09       	sbc	r21, r3
      ec:	53 09       	sbc	r21, r3
      ee:	53 09       	sbc	r21, r3
      f0:	53 09       	sbc	r21, r3
      f2:	53 09       	sbc	r21, r3
      f4:	01 09       	sbc	r16, r1
      f6:	53 09       	sbc	r21, r3
      f8:	53 09       	sbc	r21, r3
      fa:	53 09       	sbc	r21, r3
      fc:	53 09       	sbc	r21, r3
      fe:	53 09       	sbc	r21, r3
     100:	53 09       	sbc	r21, r3
     102:	53 09       	sbc	r21, r3
     104:	03 09       	sbc	r16, r3
     106:	53 09       	sbc	r21, r3
     108:	53 09       	sbc	r21, r3
     10a:	53 09       	sbc	r21, r3
     10c:	53 09       	sbc	r21, r3
     10e:	53 09       	sbc	r21, r3
     110:	53 09       	sbc	r21, r3
     112:	53 09       	sbc	r21, r3
     114:	53 09       	sbc	r21, r3
     116:	53 09       	sbc	r21, r3
     118:	53 09       	sbc	r21, r3
     11a:	53 09       	sbc	r21, r3
     11c:	53 09       	sbc	r21, r3
     11e:	53 09       	sbc	r21, r3
     120:	53 09       	sbc	r21, r3
     122:	53 09       	sbc	r21, r3
     124:	03 09       	sbc	r16, r3
     126:	53 09       	sbc	r21, r3
     128:	53 09       	sbc	r21, r3
     12a:	53 09       	sbc	r21, r3
     12c:	53 09       	sbc	r21, r3
     12e:	53 09       	sbc	r21, r3
     130:	53 09       	sbc	r21, r3
     132:	53 09       	sbc	r21, r3
     134:	53 09       	sbc	r21, r3
     136:	53 09       	sbc	r21, r3
     138:	53 09       	sbc	r21, r3
     13a:	53 09       	sbc	r21, r3
     13c:	53 09       	sbc	r21, r3
     13e:	53 09       	sbc	r21, r3
     140:	53 09       	sbc	r21, r3
     142:	53 09       	sbc	r21, r3
     144:	4f 09       	sbc	r20, r15
     146:	53 09       	sbc	r21, r3
     148:	53 09       	sbc	r21, r3
     14a:	53 09       	sbc	r21, r3
     14c:	53 09       	sbc	r21, r3
     14e:	53 09       	sbc	r21, r3
     150:	53 09       	sbc	r21, r3
     152:	53 09       	sbc	r21, r3
     154:	2c 09       	sbc	r18, r12
     156:	53 09       	sbc	r21, r3
     158:	53 09       	sbc	r21, r3
     15a:	53 09       	sbc	r21, r3
     15c:	53 09       	sbc	r21, r3
     15e:	53 09       	sbc	r21, r3
     160:	53 09       	sbc	r21, r3
     162:	53 09       	sbc	r21, r3
     164:	53 09       	sbc	r21, r3
     166:	53 09       	sbc	r21, r3
     168:	53 09       	sbc	r21, r3
     16a:	53 09       	sbc	r21, r3
     16c:	53 09       	sbc	r21, r3
     16e:	53 09       	sbc	r21, r3
     170:	53 09       	sbc	r21, r3
     172:	53 09       	sbc	r21, r3
     174:	20 09       	sbc	r18, r0
     176:	53 09       	sbc	r21, r3
     178:	53 09       	sbc	r21, r3
     17a:	53 09       	sbc	r21, r3
     17c:	53 09       	sbc	r21, r3
     17e:	53 09       	sbc	r21, r3
     180:	53 09       	sbc	r21, r3
     182:	53 09       	sbc	r21, r3
     184:	3e 09       	sbc	r19, r14

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	15 e0       	ldi	r17, 0x05	; 5
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 e9       	ldi	r30, 0x90	; 144
     19e:	f1 e2       	ldi	r31, 0x21	; 33
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 35       	cpi	r26, 0x5A	; 90
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	25 e0       	ldi	r18, 0x05	; 5
     1b2:	aa e5       	ldi	r26, 0x5A	; 90
     1b4:	b5 e0       	ldi	r27, 0x05	; 5
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a8 38       	cpi	r26, 0x88	; 136
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	61 d4       	rcall	.+2242   	; 0xa84 <main>
     1c2:	0c 94 c6 10 	jmp	0x218c	; 0x218c <_exit>

000001c6 <__bad_interrupt>:
     1c6:	e6 c4       	rjmp	.+2508   	; 0xb94 <__vector_default>

000001c8 <can_setMode>:
	copy_onto->id	  = copy_from->id;
	copy_onto->length = copy_from->length;
	for(int i = 0; i< copy_from->length; ++i) {
		copy_onto->data[i] = copy_from->data[i];
	}
}
     1c8:	48 2f       	mov	r20, r24
     1ca:	60 ee       	ldi	r22, 0xE0	; 224
     1cc:	8f e0       	ldi	r24, 0x0F	; 15
     1ce:	ce c4       	rjmp	.+2460   	; 0xb6c <mcp_bitModify>
     1d0:	08 95       	ret

000001d2 <can_init>:
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	1f 92       	push	r1
     1d8:	1f 92       	push	r1
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	8b d7       	rcall	.+3862   	; 0x10f6 <spi_init>
     1e0:	5e d4       	rcall	.+2236   	; 0xa9e <mcp_init>
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	be 01       	movw	r22, r28
     1e8:	6f 5f       	subi	r22, 0xFF	; 255
     1ea:	7f 4f       	sbci	r23, 0xFF	; 255
     1ec:	8e e0       	ldi	r24, 0x0E	; 14
     1ee:	59 d4       	rcall	.+2226   	; 0xaa2 <mcp_read>
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	98 2f       	mov	r25, r24
     1f4:	90 7e       	andi	r25, 0xE0	; 224
     1f6:	90 38       	cpi	r25, 0x80	; 128
     1f8:	69 f0       	breq	.+26     	; 0x214 <can_init+0x42>
     1fa:	1f 92       	push	r1
     1fc:	8f 93       	push	r24
     1fe:	8d e0       	ldi	r24, 0x0D	; 13
     200:	92 e0       	ldi	r25, 0x02	; 2
     202:	9f 93       	push	r25
     204:	8f 93       	push	r24
     206:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <printf>
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	04 c0       	rjmp	.+8      	; 0x21c <can_init+0x4a>
     214:	80 e5       	ldi	r24, 0x50	; 80
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	0e 94 8e 09 	call	0x131c	; 0x131c <printf_char>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	d4 df       	rcall	.-88     	; 0x1c8 <can_setMode>
     220:	41 e0       	ldi	r20, 0x01	; 1
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	be 01       	movw	r22, r28
     226:	6e 5f       	subi	r22, 0xFE	; 254
     228:	7f 4f       	sbci	r23, 0xFF	; 255
     22a:	8f e0       	ldi	r24, 0x0F	; 15
     22c:	3a d4       	rcall	.+2164   	; 0xaa2 <mcp_read>
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	1f 92       	push	r1
     232:	8f 93       	push	r24
     234:	83 e6       	ldi	r24, 0x63	; 99
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	9f 93       	push	r25
     23a:	8f 93       	push	r24
     23c:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <printf>
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <can_create_massage>:
     252:	bf 92       	push	r11
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	2b 97       	sbiw	r28, 0x0b	; 11
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	8c 01       	movw	r16, r24
     276:	7b 01       	movw	r14, r22
     278:	d4 2e       	mov	r13, r20
     27a:	c2 2e       	mov	r12, r18
     27c:	b3 2e       	mov	r11, r19
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	84 17       	cp	r24, r20
     282:	00 f5       	brcc	.+64     	; 0x2c4 <can_create_massage+0x72>
     284:	81 e8       	ldi	r24, 0x81	; 129
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 8e 09 	call	0x131c	; 0x131c <printf_char>
     28c:	8d 2d       	mov	r24, r13
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 9c 09 	call	0x1338	; 0x1338 <printf_int>
     294:	81 eb       	ldi	r24, 0xB1	; 177
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 8e 09 	call	0x131c	; 0x131c <printf_char>
     29c:	88 e0       	ldi	r24, 0x08	; 8
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 9c 09 	call	0x1338	; 0x1338 <printf_int>
     2a4:	87 e7       	ldi	r24, 0x77	; 119
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	0e 94 8e 09 	call	0x131c	; 0x131c <printf_char>
     2ac:	68 e0       	ldi	r22, 0x08	; 8
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	68 94       	set
     2b2:	dd 24       	eor	r13, r13
     2b4:	d3 f8       	bld	r13, 3
     2b6:	ec 2d       	mov	r30, r12
     2b8:	fb 2d       	mov	r31, r11
     2ba:	de 01       	movw	r26, r28
     2bc:	14 96       	adiw	r26, 0x04	; 4
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <can_create_massage+0x7e>
     2c4:	64 2f       	mov	r22, r20
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	16 16       	cp	r1, r22
     2ca:	17 06       	cpc	r1, r23
     2cc:	a4 f3       	brlt	.-24     	; 0x2b6 <can_create_massage+0x64>
     2ce:	07 c0       	rjmp	.+14     	; 0x2de <can_create_massage+0x8c>
     2d0:	91 91       	ld	r25, Z+
     2d2:	9d 93       	st	X+, r25
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	26 17       	cp	r18, r22
     2da:	37 07       	cpc	r19, r23
     2dc:	cc f3       	brlt	.-14     	; 0x2d0 <can_create_massage+0x7e>
     2de:	fa 82       	std	Y+2, r15	; 0x02
     2e0:	e9 82       	std	Y+1, r14	; 0x01
     2e2:	db 82       	std	Y+3, r13	; 0x03
     2e4:	8b e0       	ldi	r24, 0x0B	; 11
     2e6:	fe 01       	movw	r30, r28
     2e8:	31 96       	adiw	r30, 0x01	; 1
     2ea:	d8 01       	movw	r26, r16
     2ec:	01 90       	ld	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	8a 95       	dec	r24
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <can_create_massage+0x9a>
     2f4:	c8 01       	movw	r24, r16
     2f6:	2b 96       	adiw	r28, 0x0b	; 11
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	f8 94       	cli
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	cd bf       	out	0x3d, r28	; 61
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	08 95       	ret

00000316 <can_message_to_buffer>:
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	00 d0       	rcall	.+0      	; 0x326 <can_message_to_buffer+0x10>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	8c 01       	movw	r16, r24
     32c:	f6 2e       	mov	r15, r22
     32e:	66 23       	and	r22, r22
     330:	89 f0       	breq	.+34     	; 0x354 <can_message_to_buffer+0x3e>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	68 17       	cp	r22, r24
     336:	c1 f0       	breq	.+48     	; 0x368 <can_message_to_buffer+0x52>
     338:	e2 e0       	ldi	r30, 0x02	; 2
     33a:	6e 17       	cp	r22, r30
     33c:	f9 f0       	breq	.+62     	; 0x37c <can_message_to_buffer+0x66>
     33e:	f3 e0       	ldi	r31, 0x03	; 3
     340:	6f 13       	cpse	r22, r31
     342:	04 c0       	rjmp	.+8      	; 0x34c <can_message_to_buffer+0x36>
     344:	82 ec       	ldi	r24, 0xC2	; 194
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	e9 d7       	rcall	.+4050   	; 0x131c <printf_char>
     34a:	4b c0       	rjmp	.+150    	; 0x3e2 <can_message_to_buffer+0xcc>
     34c:	8b ee       	ldi	r24, 0xEB	; 235
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	e5 d7       	rcall	.+4042   	; 0x131c <printf_char>
     352:	47 c0       	rjmp	.+142    	; 0x3e2 <can_message_to_buffer+0xcc>
     354:	0f 2e       	mov	r0, r31
     356:	f6 e3       	ldi	r31, 0x36	; 54
     358:	df 2e       	mov	r13, r31
     35a:	f0 2d       	mov	r31, r0
     35c:	0f 2e       	mov	r0, r31
     35e:	f5 e3       	ldi	r31, 0x35	; 53
     360:	ef 2e       	mov	r14, r31
     362:	f0 2d       	mov	r31, r0
     364:	81 e3       	ldi	r24, 0x31	; 49
     366:	13 c0       	rjmp	.+38     	; 0x38e <can_message_to_buffer+0x78>
     368:	0f 2e       	mov	r0, r31
     36a:	f6 e4       	ldi	r31, 0x46	; 70
     36c:	df 2e       	mov	r13, r31
     36e:	f0 2d       	mov	r31, r0
     370:	0f 2e       	mov	r0, r31
     372:	f5 e4       	ldi	r31, 0x45	; 69
     374:	ef 2e       	mov	r14, r31
     376:	f0 2d       	mov	r31, r0
     378:	81 e4       	ldi	r24, 0x41	; 65
     37a:	09 c0       	rjmp	.+18     	; 0x38e <can_message_to_buffer+0x78>
     37c:	0f 2e       	mov	r0, r31
     37e:	f6 e5       	ldi	r31, 0x56	; 86
     380:	df 2e       	mov	r13, r31
     382:	f0 2d       	mov	r31, r0
     384:	0f 2e       	mov	r0, r31
     386:	f5 e5       	ldi	r31, 0x55	; 85
     388:	ef 2e       	mov	r14, r31
     38a:	f0 2d       	mov	r31, r0
     38c:	81 e5       	ldi	r24, 0x51	; 81
     38e:	f8 01       	movw	r30, r16
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	a9 01       	movw	r20, r18
     396:	56 95       	lsr	r21
     398:	47 95       	ror	r20
     39a:	56 95       	lsr	r21
     39c:	47 95       	ror	r20
     39e:	56 95       	lsr	r21
     3a0:	47 95       	ror	r20
     3a2:	49 83       	std	Y+1, r20	; 0x01
     3a4:	22 95       	swap	r18
     3a6:	22 0f       	add	r18, r18
     3a8:	20 7e       	andi	r18, 0xE0	; 224
     3aa:	2a 83       	std	Y+2, r18	; 0x02
     3ac:	42 e0       	ldi	r20, 0x02	; 2
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	be 01       	movw	r22, r28
     3b2:	6f 5f       	subi	r22, 0xFF	; 255
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	96 d3       	rcall	.+1836   	; 0xae4 <mcp_write>
     3b8:	f8 01       	movw	r30, r16
     3ba:	92 81       	ldd	r25, Z+2	; 0x02
     3bc:	9b 83       	std	Y+3, r25	; 0x03
     3be:	41 e0       	ldi	r20, 0x01	; 1
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	be 01       	movw	r22, r28
     3c4:	6d 5f       	subi	r22, 0xFD	; 253
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	8e 2d       	mov	r24, r14
     3ca:	8c d3       	rcall	.+1816   	; 0xae4 <mcp_write>
     3cc:	4b 81       	ldd	r20, Y+3	; 0x03
     3ce:	44 23       	and	r20, r20
     3d0:	31 f0       	breq	.+12     	; 0x3de <can_message_to_buffer+0xc8>
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	b8 01       	movw	r22, r16
     3d6:	6d 5f       	subi	r22, 0xFD	; 253
     3d8:	7f 4f       	sbci	r23, 0xFF	; 255
     3da:	8d 2d       	mov	r24, r13
     3dc:	83 d3       	rcall	.+1798   	; 0xae4 <mcp_write>
     3de:	8f 2d       	mov	r24, r15
     3e0:	a2 d3       	rcall	.+1860   	; 0xb26 <mcp_requestToSend>
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	08 95       	ret

000003f8 <can_findFreeTransmitBuffer>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	80 e3       	ldi	r24, 0x30	; 48
     40e:	49 d3       	rcall	.+1682   	; 0xaa2 <mcp_read>
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	83 ff       	sbrs	r24, 3
     414:	16 c0       	rjmp	.+44     	; 0x442 <can_findFreeTransmitBuffer+0x4a>
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	be 01       	movw	r22, r28
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	80 e4       	ldi	r24, 0x40	; 64
     422:	3f d3       	rcall	.+1662   	; 0xaa2 <mcp_read>
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	83 ff       	sbrs	r24, 3
     428:	0e c0       	rjmp	.+28     	; 0x446 <can_findFreeTransmitBuffer+0x4e>
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	be 01       	movw	r22, r28
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	80 e5       	ldi	r24, 0x50	; 80
     436:	35 d3       	rcall	.+1642   	; 0xaa2 <mcp_read>
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	83 fd       	sbrc	r24, 3
     43c:	06 c0       	rjmp	.+12     	; 0x44a <can_findFreeTransmitBuffer+0x52>
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	05 c0       	rjmp	.+10     	; 0x44c <can_findFreeTransmitBuffer+0x54>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	03 c0       	rjmp	.+6      	; 0x44c <can_findFreeTransmitBuffer+0x54>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	01 c0       	rjmp	.+2      	; 0x44c <can_findFreeTransmitBuffer+0x54>
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <can_send_message>:
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	8c 01       	movw	r16, r24
     45e:	cc df       	rcall	.-104    	; 0x3f8 <can_findFreeTransmitBuffer>
     460:	84 30       	cpi	r24, 0x04	; 4
     462:	c9 f0       	breq	.+50     	; 0x496 <can_send_message+0x42>
     464:	14 c0       	rjmp	.+40     	; 0x48e <can_send_message+0x3a>
     466:	c8 df       	rcall	.-112    	; 0x3f8 <can_findFreeTransmitBuffer>
     468:	21 97       	sbiw	r28, 0x01	; 1
     46a:	20 97       	sbiw	r28, 0x00	; 0
     46c:	71 f4       	brne	.+28     	; 0x48a <can_send_message+0x36>
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <puts>
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	83 ed       	ldi	r24, 0xD3	; 211
     47a:	90 e3       	ldi	r25, 0x30	; 48
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	80 40       	sbci	r24, 0x00	; 0
     480:	90 40       	sbci	r25, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <can_send_message+0x28>
     484:	00 c0       	rjmp	.+0      	; 0x486 <can_send_message+0x32>
     486:	00 00       	nop
     488:	0a c0       	rjmp	.+20     	; 0x49e <can_send_message+0x4a>
     48a:	84 30       	cpi	r24, 0x04	; 4
     48c:	61 f3       	breq	.-40     	; 0x466 <can_send_message+0x12>
     48e:	68 2f       	mov	r22, r24
     490:	c8 01       	movw	r24, r16
     492:	41 df       	rcall	.-382    	; 0x316 <can_message_to_buffer>
     494:	04 c0       	rjmp	.+8      	; 0x49e <can_send_message+0x4a>
     496:	b0 df       	rcall	.-160    	; 0x3f8 <can_findFreeTransmitBuffer>
     498:	ce ef       	ldi	r28, 0xFE	; 254
     49a:	df e7       	ldi	r29, 0x7F	; 127
     49c:	f6 cf       	rjmp	.-20     	; 0x48a <can_send_message+0x36>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <parseId>:
     4a8:	fc 01       	movw	r30, r24
     4aa:	81 81       	ldd	r24, Z+1	; 0x01
     4ac:	82 95       	swap	r24
     4ae:	86 95       	lsr	r24
     4b0:	87 70       	andi	r24, 0x07	; 7
     4b2:	20 81       	ld	r18, Z
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	38 e0       	ldi	r19, 0x08	; 8
     4b8:	23 9f       	mul	r18, r19
     4ba:	80 0d       	add	r24, r0
     4bc:	91 1d       	adc	r25, r1
     4be:	11 24       	eor	r1, r1
     4c0:	08 95       	ret

000004c2 <can_recieve_message>:
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	2b 97       	sbiw	r28, 0x0b	; 11
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8c 01       	movw	r16, r24
     4e4:	f6 2e       	mov	r15, r22
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	8c e2       	ldi	r24, 0x2C	; 44
     4ec:	3f d3       	rcall	.+1662   	; 0xb6c <mcp_bitModify>
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	f8 16       	cp	r15, r24
     4f2:	71 f0       	breq	.+28     	; 0x510 <can_recieve_message+0x4e>
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	f8 16       	cp	r15, r24
     4f8:	a9 f0       	breq	.+42     	; 0x524 <can_recieve_message+0x62>
     4fa:	8f e4       	ldi	r24, 0x4F	; 79
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e d7       	rcall	.+3612   	; 0x131c <printf_char>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	4f ef       	ldi	r20, 0xFF	; 255
     506:	6f ef       	ldi	r22, 0xFF	; 255
     508:	7f ef       	ldi	r23, 0xFF	; 255
     50a:	c8 01       	movw	r24, r16
     50c:	a2 de       	rcall	.-700    	; 0x252 <can_create_massage>
     50e:	32 c0       	rjmp	.+100    	; 0x574 <can_recieve_message+0xb2>
     510:	0f 2e       	mov	r0, r31
     512:	f6 e6       	ldi	r31, 0x66	; 102
     514:	df 2e       	mov	r13, r31
     516:	f0 2d       	mov	r31, r0
     518:	0f 2e       	mov	r0, r31
     51a:	f5 e6       	ldi	r31, 0x65	; 101
     51c:	cf 2e       	mov	r12, r31
     51e:	f0 2d       	mov	r31, r0
     520:	81 e6       	ldi	r24, 0x61	; 97
     522:	09 c0       	rjmp	.+18     	; 0x536 <can_recieve_message+0x74>
     524:	0f 2e       	mov	r0, r31
     526:	f6 e7       	ldi	r31, 0x76	; 118
     528:	df 2e       	mov	r13, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	0f 2e       	mov	r0, r31
     52e:	f5 e7       	ldi	r31, 0x75	; 117
     530:	cf 2e       	mov	r12, r31
     532:	f0 2d       	mov	r31, r0
     534:	81 e7       	ldi	r24, 0x71	; 113
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	b0 d2       	rcall	.+1376   	; 0xaa2 <mcp_read>
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	b0 df       	rcall	.-160    	; 0x4a8 <parseId>
     548:	7c 01       	movw	r14, r24
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	be 01       	movw	r22, r28
     550:	6d 5f       	subi	r22, 0xFD	; 253
     552:	7f 4f       	sbci	r23, 0xFF	; 255
     554:	8c 2d       	mov	r24, r12
     556:	a5 d2       	rcall	.+1354   	; 0xaa2 <mcp_read>
     558:	4b 81       	ldd	r20, Y+3	; 0x03
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	be 01       	movw	r22, r28
     55e:	6c 5f       	subi	r22, 0xFC	; 252
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	8d 2d       	mov	r24, r13
     564:	9e d2       	rcall	.+1340   	; 0xaa2 <mcp_read>
     566:	9e 01       	movw	r18, r28
     568:	2c 5f       	subi	r18, 0xFC	; 252
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	4b 81       	ldd	r20, Y+3	; 0x03
     56e:	b7 01       	movw	r22, r14
     570:	c8 01       	movw	r24, r16
     572:	6f de       	rcall	.-802    	; 0x252 <can_create_massage>
     574:	c8 01       	movw	r24, r16
     576:	2b 96       	adiw	r28, 0x0b	; 11
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	08 95       	ret

00000594 <can_findFullReceiveBuffer>:
     594:	80 fd       	sbrc	r24, 0
     596:	07 c0       	rjmp	.+14     	; 0x5a6 <can_findFullReceiveBuffer+0x12>
     598:	81 fd       	sbrc	r24, 1
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <can_findFullReceiveBuffer+0x16>
     59c:	88 e6       	ldi	r24, 0x68	; 104
     59e:	93 e0       	ldi	r25, 0x03	; 3
     5a0:	bd d6       	rcall	.+3450   	; 0x131c <printf_char>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	08 95       	ret
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	08 95       	ret
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	08 95       	ret

000005ae <can_findReceiveBuffer>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	1f 92       	push	r1
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	8c e2       	ldi	r24, 0x2C	; 44
     5c4:	6e d2       	rcall	.+1244   	; 0xaa2 <mcp_read>
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	80 fd       	sbrc	r24, 0
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <can_findReceiveBuffer+0x26>
     5cc:	81 ff       	sbrs	r24, 1
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <can_findReceiveBuffer+0x2a>
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <can_findReceiveBuffer+0x2c>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <can_findReceiveBuffer+0x2c>
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	0f 90       	pop	r0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <can_handleRecievedMessages>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2b 97       	sbiw	r28, 0x0b	; 11
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	db df       	rcall	.-74     	; 0x5ae <can_findReceiveBuffer>
     5f8:	8f 3f       	cpi	r24, 0xFF	; 255
     5fa:	39 f0       	breq	.+14     	; 0x60a <can_handleRecievedMessages+0x28>
     5fc:	68 2f       	mov	r22, r24
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	5f df       	rcall	.-322    	; 0x4c2 <can_recieve_message>
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	9c d3       	rcall	.+1848   	; 0xd42 <parser_handleRecievedMessages>
     60a:	2b 96       	adiw	r28, 0x0b	; 11
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <can_print_message>:
	
	printf("transmit_buffer:\n");
	can_print_message(&recv_msg);
}

void can_print_message(struct can_message* msg) {
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	7c 01       	movw	r14, r24
	printf_char("Can_Message: \n	ID: ");
     62a:	8a e8       	ldi	r24, 0x8A	; 138
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	76 d6       	rcall	.+3308   	; 0x131c <printf_char>
	printf_int(msg->id);
     630:	f7 01       	movw	r30, r14
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	80 d6       	rcall	.+3328   	; 0x1338 <printf_int>
	printf_char("\n	length: ");
     638:	8e e9       	ldi	r24, 0x9E	; 158
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	6f d6       	rcall	.+3294   	; 0x131c <printf_char>
	printf_int(msg->length);
     63e:	f7 01       	movw	r30, r14
     640:	82 81       	ldd	r24, Z+2	; 0x02
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	79 d6       	rcall	.+3314   	; 0x1338 <printf_int>
	printf_char("\n	data: ");
     646:	89 ea       	ldi	r24, 0xA9	; 169
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	68 d6       	rcall	.+3280   	; 0x131c <printf_char>
	for(int i = 0; i < msg->length; i++) {
     64c:	f7 01       	movw	r30, r14
     64e:	82 81       	ldd	r24, Z+2	; 0x02
     650:	88 23       	and	r24, r24
     652:	a1 f0       	breq	.+40     	; 0x67c <can_print_message+0x60>
     654:	87 01       	movw	r16, r14
     656:	0d 5f       	subi	r16, 0xFD	; 253
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	c0 e0       	ldi	r28, 0x00	; 0
     65c:	d0 e0       	ldi	r29, 0x00	; 0
		printf_int(msg->data[i]);
     65e:	f8 01       	movw	r30, r16
     660:	81 91       	ld	r24, Z+
     662:	8f 01       	movw	r16, r30
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	68 d6       	rcall	.+3280   	; 0x1338 <printf_int>
		printf_char(",");
     668:	82 eb       	ldi	r24, 0xB2	; 178
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	57 d6       	rcall	.+3246   	; 0x131c <printf_char>
	printf_char("Can_Message: \n	ID: ");
	printf_int(msg->id);
	printf_char("\n	length: ");
	printf_int(msg->length);
	printf_char("\n	data: ");
	for(int i = 0; i < msg->length; i++) {
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	f7 01       	movw	r30, r14
     672:	22 81       	ldd	r18, Z+2	; 0x02
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	c2 17       	cp	r28, r18
     678:	d3 07       	cpc	r29, r19
     67a:	8c f3       	brlt	.-30     	; 0x65e <can_print_message+0x42>
		printf_int(msg->data[i]);
		printf_char(",");
	}
	printf_char("\n");
     67c:	87 e7       	ldi	r24, 0x77	; 119
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	4d d6       	rcall	.+3226   	; 0x131c <printf_char>
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	ef 90       	pop	r14
     68e:	08 95       	ret

00000690 <__vector_2>:
		copy_onto->data[i] = copy_from->data[i];
	}
}

//Interrupt-handler
ISR(INT1_vect){
     690:	1f 92       	push	r1
     692:	0f 92       	push	r0
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	0f 92       	push	r0
     698:	11 24       	eor	r1, r1
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	2b 97       	sbiw	r28, 0x0b	; 11
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	cd bf       	out	0x3d, r28	; 61
	
	// Interrupt when CAN receives a message
	printf_char("Received message by interrupt\n");
     6c4:	84 eb       	ldi	r24, 0xB4	; 180
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	29 d6       	rcall	.+3154   	; 0x131c <printf_char>
	char status = mcp_readStatus();
     6ca:	46 d2       	rcall	.+1164   	; 0xb58 <mcp_readStatus>
	enum RECIEVE_BUFFER buffer = can_findFullReceiveBuffer(status);
     6cc:	63 df       	rcall	.-314    	; 0x594 <can_findFullReceiveBuffer>
	struct can_message recv = can_recieve_message(buffer);
     6ce:	68 2f       	mov	r22, r24
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	f6 de       	rcall	.-532    	; 0x4c2 <can_recieve_message>
	printf( "Adding message to buffer..\n");
	//can_buffer_addMessageToBuffer(&recv);
	#endif //INCLUDE_CAN_BUFFER

	#ifndef INCLUDE_CAN_BUFFER
	printf_char("Printing\n");
     6d6:	83 ed       	ldi	r24, 0xD3	; 211
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	20 d6       	rcall	.+3136   	; 0x131c <printf_char>
	can_print_message(&recv);
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	9d df       	rcall	.-198    	; 0x61c <can_print_message>
	#endif //INCLUDE_CAN_BUFFER
	printf_char("Inerrupt done\n");
     6e2:	8d ed       	ldi	r24, 0xDD	; 221
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	1a d6       	rcall	.+3124   	; 0x131c <printf_char>
	sei();
     6e8:	78 94       	sei
}
     6ea:	2b 96       	adiw	r28, 0x0b	; 11
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	bf 91       	pop	r27
     700:	af 91       	pop	r26
     702:	9f 91       	pop	r25
     704:	8f 91       	pop	r24
     706:	7f 91       	pop	r23
     708:	6f 91       	pop	r22
     70a:	5f 91       	pop	r21
     70c:	4f 91       	pop	r20
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	0f 90       	pop	r0
     714:	0b be       	out	0x3b, r0	; 59
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <dac_setVoltage>:
	TWI_Master_Initialise();
	_mototInit();
	regulator_init(0.4, 0.2);	
}

void dac_setVoltage(unsigned char percentage) {
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	00 d0       	rcall	.+0      	; 0x726 <dac_setVoltage+0x6>
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
	unsigned char message[3];
	message[0] = 0x5E; // Addressing the DAC
     72a:	9e e5       	ldi	r25, 0x5E	; 94
     72c:	99 83       	std	Y+1, r25	; 0x01
	message[1] = 3; // Addressing DAC0?
     72e:	93 e0       	ldi	r25, 0x03	; 3
     730:	9a 83       	std	Y+2, r25	; 0x02
	message[2] = (0xFF * percentage) / 100; // Setting the value to a percentage of the max-voltage
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	82 9f       	mul	r24, r18
     736:	c0 01       	movw	r24, r0
     738:	11 24       	eor	r1, r1
     73a:	64 e6       	ldi	r22, 0x64	; 100
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divmodhi4>
     742:	6b 83       	std	Y+3, r22	; 0x03
	
	TWI_Start_Transceiver_With_Data(message, 3);
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	1e d5       	rcall	.+2620   	; 0x1188 <TWI_Start_Transceiver_With_Data>
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <_setMotorDirectionForward>:

void _setMotorDirectionForward(boolean forward){
	if(forward) {
     758:	89 2b       	or	r24, r25
     75a:	31 f0       	breq	.+12     	; 0x768 <_setMotorDirectionForward+0x10>
		SET_BIT(MOTOR_PORT, MOTOR_DIR_BIT);
     75c:	e2 e0       	ldi	r30, 0x02	; 2
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	80 81       	ld	r24, Z
     762:	82 60       	ori	r24, 0x02	; 2
     764:	80 83       	st	Z, r24
     766:	08 95       	ret
	} else {
		CLEAR_BIT(MOTOR_PORT, MOTOR_DIR_BIT);
     768:	e2 e0       	ldi	r30, 0x02	; 2
     76a:	f1 e0       	ldi	r31, 0x01	; 1
     76c:	80 81       	ld	r24, Z
     76e:	8d 7f       	andi	r24, 0xFD	; 253
     770:	80 83       	st	Z, r24
     772:	08 95       	ret

00000774 <_mototInit>:
	}
}

void _mototInit() {
	// Eable interraction with motorbox
	SET_BIT(DDRH, MOTOR_DIR_BIT); // Set the dir-pin as output
     774:	e1 e0       	ldi	r30, 0x01	; 1
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	80 81       	ld	r24, Z
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	80 83       	st	Z, r24
	
	// Set the SEL-pin
	SET_BIT(DDRH, MOTOR_SEL_BIT);
     77e:	80 81       	ld	r24, Z
     780:	88 60       	ori	r24, 0x08	; 8
     782:	80 83       	st	Z, r24
	
	//reset Encoder
	DDRH |= (1<< MOTOR_nRST_BIT) | (1<< MOTOR_nOE_BIT);
     784:	80 81       	ld	r24, Z
     786:	80 66       	ori	r24, 0x60	; 96
     788:	80 83       	st	Z, r24
	CLEAR_BIT(MOTOR_PORT, MOTOR_nRST_BIT);
     78a:	e2 e0       	ldi	r30, 0x02	; 2
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	80 81       	ld	r24, Z
     790:	8f 7b       	andi	r24, 0xBF	; 191
     792:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	89 ef       	ldi	r24, 0xF9	; 249
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <_mototInit+0x26>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <_mototInit+0x30>
     7a4:	00 00       	nop
	_delay_ms(20);
	SET_BIT(MOTOR_PORT, MOTOR_nRST_BIT);
     7a6:	80 81       	ld	r24, Z
     7a8:	80 64       	ori	r24, 0x40	; 64
     7aa:	80 83       	st	Z, r24
	
	dac_setVoltage(0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	b8 cf       	rjmp	.-144    	; 0x720 <dac_setVoltage>
     7b0:	08 95       	ret

000007b2 <dac_init>:
#include "../TWI/twi.h"
#include "stdio.h"
#include "../REGULATOR/regulator.h"

void dac_init() {
	sei();
     7b2:	78 94       	sei
	TWI_Master_Initialise();
     7b4:	df d4       	rcall	.+2494   	; 0x1174 <TWI_Master_Initialise>
	_mototInit();
     7b6:	de df       	rcall	.-68     	; 0x774 <_mototInit>
	regulator_init(0.4, 0.2);	
     7b8:	2d ec       	ldi	r18, 0xCD	; 205
     7ba:	3c ec       	ldi	r19, 0xCC	; 204
     7bc:	4c e4       	ldi	r20, 0x4C	; 76
     7be:	5e e3       	ldi	r21, 0x3E	; 62
     7c0:	6d ec       	ldi	r22, 0xCD	; 205
     7c2:	7c ec       	ldi	r23, 0xCC	; 204
     7c4:	8c ec       	ldi	r24, 0xCC	; 204
     7c6:	9e e3       	ldi	r25, 0x3E	; 62
     7c8:	76 c3       	rjmp	.+1772   	; 0xeb6 <regulator_init>
     7ca:	08 95       	ret

000007cc <_motorReadEncoder>:
	
	dac_setVoltage(0);
}

int _motorReadEncoder() {
	MOTOR_PORT &= ~((1<<MOTOR_SEL_BIT) | (1<< MOTOR_nOE_BIT));
     7cc:	e2 e0       	ldi	r30, 0x02	; 2
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	80 81       	ld	r24, Z
     7d2:	87 7d       	andi	r24, 0xD7	; 215
     7d4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d6:	2a e6       	ldi	r18, 0x6A	; 106
     7d8:	2a 95       	dec	r18
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <_motorReadEncoder+0xc>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <_motorReadEncoder+0x12>
	_delay_us(20);
	char msb = ENCODER_PIN;
     7de:	80 91 06 01 	lds	r24, 0x0106
	int encoder = (msb << 8);
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	98 2f       	mov	r25, r24
     7e6:	88 27       	eor	r24, r24
	SET_BIT(MOTOR_PORT, MOTOR_SEL_BIT);
     7e8:	20 81       	ld	r18, Z
     7ea:	28 60       	ori	r18, 0x08	; 8
     7ec:	20 83       	st	Z, r18
     7ee:	2a e6       	ldi	r18, 0x6A	; 106
     7f0:	2a 95       	dec	r18
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <_motorReadEncoder+0x24>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <_motorReadEncoder+0x2a>
	_delay_us(20);
	char lsb = ENCODER_PIN;
     7f6:	20 91 06 01 	lds	r18, 0x0106
	encoder |= lsb;
     7fa:	82 2b       	or	r24, r18

	return -encoder; // In order for right to be the positive direction
}
     7fc:	91 95       	neg	r25
     7fe:	81 95       	neg	r24
     800:	91 09       	sbc	r25, r1
     802:	08 95       	ret

00000804 <dac_conrolMotor>:


void dac_conrolMotor(int power) {
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	ec 01       	movw	r28, r24
	
	if(power >= 0) {
     80a:	99 23       	and	r25, r25
     80c:	34 f0       	brlt	.+12     	; 0x81a <dac_conrolMotor+0x16>
		//set direction pin +
		_setMotorDirectionForward(true);
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a2 df       	rcall	.-188    	; 0x758 <_setMotorDirectionForward>
		dac_setVoltage(power);
     814:	8c 2f       	mov	r24, r28
     816:	84 df       	rcall	.-248    	; 0x720 <dac_setVoltage>
     818:	06 c0       	rjmp	.+12     	; 0x826 <dac_conrolMotor+0x22>
	} else {
		//set direction pin -?
		_setMotorDirectionForward(false);
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9c df       	rcall	.-200    	; 0x758 <_setMotorDirectionForward>
		dac_setVoltage(-power);
     820:	8c 2f       	mov	r24, r28
     822:	81 95       	neg	r24
     824:	7d df       	rcall	.-262    	; 0x720 <dac_setVoltage>
	}
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <game_handelPoints>:
#include "../PARSER/parser.h"

static char gameNumber = 0;
static boolean gameRunning = false; 

void game_handelPoints() {
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	2b 97       	sbiw	r28, 0x0b	; 11
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	static int delay = 3000 / TIMER_PERIOD; // one point every second
	
	if(!gameRunning || ir_detectBeamBlocked()) { // Only counts if the game is running
     840:	80 91 5a 05 	lds	r24, 0x055A
     844:	90 91 5b 05 	lds	r25, 0x055B
     848:	89 2b       	or	r24, r25
     84a:	19 f0       	breq	.+6      	; 0x852 <game_handelPoints+0x26>
     84c:	f5 d0       	rcall	.+490    	; 0xa38 <ir_detectBeamBlocked>
     84e:	89 2b       	or	r24, r25
     850:	39 f0       	breq	.+14     	; 0x860 <game_handelPoints+0x34>
		delay = 3000/TIMER_PERIOD;
     852:	8c e3       	ldi	r24, 0x3C	; 60
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	90 93 0b 02 	sts	0x020B, r25
     85a:	80 93 0a 02 	sts	0x020A, r24
		return; 
     85e:	21 c0       	rjmp	.+66     	; 0x8a2 <game_handelPoints+0x76>
	}
	
	if(--delay == 0){
     860:	80 91 0a 02 	lds	r24, 0x020A
     864:	90 91 0b 02 	lds	r25, 0x020B
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	29 f0       	breq	.+10     	; 0x878 <game_handelPoints+0x4c>
     86e:	90 93 0b 02 	sts	0x020B, r25
     872:	80 93 0a 02 	sts	0x020A, r24
     876:	15 c0       	rjmp	.+42     	; 0x8a2 <game_handelPoints+0x76>
		delay = 3000/TIMER_PERIOD;
     878:	8c e3       	ldi	r24, 0x3C	; 60
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 0b 02 	sts	0x020B, r25
     880:	80 93 0a 02 	sts	0x020A, r24
		printf("point\n");
     884:	8d ef       	ldi	r24, 0xFD	; 253
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <puts>
		struct can_message msg = can_create_massage(ID_POINTS, 1, &gameNumber);
     88c:	2c e5       	ldi	r18, 0x5C	; 92
     88e:	35 e0       	ldi	r19, 0x05	; 5
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	66 e0       	ldi	r22, 0x06	; 6
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	db dc       	rcall	.-1610   	; 0x252 <can_create_massage>
		can_send_message(&msg);
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	d9 dd       	rcall	.-1102   	; 0x454 <can_send_message>
	}
}
     8a2:	2b 96       	adiw	r28, 0x0b	; 11
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <game_initNewGame>:
	}
}


void game_initNewGame( char gameID){
	gameRunning = true; 
     8b4:	21 e0       	ldi	r18, 0x01	; 1
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	30 93 5b 05 	sts	0x055B, r19
     8bc:	20 93 5a 05 	sts	0x055A, r18
	gameNumber = gameID; 
     8c0:	80 93 5c 05 	sts	0x055C, r24
	ir_enableBeam();
     8c4:	a5 c0       	rjmp	.+330    	; 0xa10 <ir_enableBeam>
     8c6:	08 95       	ret

000008c8 <game_endGame>:
} 

void game_endGame(){
	ir_disableBeam(); 
     8c8:	ae d0       	rcall	.+348    	; 0xa26 <ir_disableBeam>
	gameRunning = false; 
     8ca:	10 92 5b 05 	sts	0x055B, r1
     8ce:	10 92 5a 05 	sts	0x055A, r1
     8d2:	08 95       	ret

000008d4 <game_sendBeamBrokenMessage>:
}

void game_sendBeamBrokenMessage(){
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	2b 97       	sbiw	r28, 0x0b	; 11
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
	//printf("SEND BROKEN MESSAGE %d, %d, %d", ID_GAME, 1, gameNumber); 
	struct can_message msg = can_create_massage(ID_GAME, 1, &gameNumber);
     8e8:	2c e5       	ldi	r18, 0x5C	; 92
     8ea:	35 e0       	ldi	r19, 0x05	; 5
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	ad dc       	rcall	.-1702   	; 0x252 <can_create_massage>
	can_send_message(&msg);
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	ab dd       	rcall	.-1194   	; 0x454 <can_send_message>
}
     8fe:	2b 96       	adiw	r28, 0x0b	; 11
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <game_interrupt_handleIrBeam>:

void game_interrupt_handleIrBeam(){
	static int subCounter = 3; // Makes it so that a single low voltage can't be detected as a broken beam
	static int beamTimer = 50;

	if(ir_detectBeamBlocked()) {
     910:	93 d0       	rcall	.+294    	; 0xa38 <ir_detectBeamBlocked>
     912:	89 2b       	or	r24, r25
     914:	89 f1       	breq	.+98     	; 0x978 <game_interrupt_handleIrBeam+0x68>
		printf("*");
     916:	8a e2       	ldi	r24, 0x2A	; 42
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <putchar>
		if(beamTimer <= 0) {
     91e:	80 91 08 02 	lds	r24, 0x0208
     922:	90 91 09 02 	lds	r25, 0x0209
     926:	18 16       	cp	r1, r24
     928:	19 06       	cpc	r1, r25
     92a:	fc f0       	brlt	.+62     	; 0x96a <game_interrupt_handleIrBeam+0x5a>
			if (subCounter <= 0){ // Makes it so that a single low voltage can't be detected as a broken beam
     92c:	80 91 06 02 	lds	r24, 0x0206
     930:	90 91 07 02 	lds	r25, 0x0207
     934:	18 16       	cp	r1, r24
     936:	19 06       	cpc	r1, r25
     938:	94 f0       	brlt	.+36     	; 0x95e <game_interrupt_handleIrBeam+0x4e>
				subCounter = 3;
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 07 02 	sts	0x0207, r25
     942:	80 93 06 02 	sts	0x0206, r24
				printf("\nBROKEN\n");
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <puts>
				game_sendBeamBrokenMessage();
     94e:	c2 df       	rcall	.-124    	; 0x8d4 <game_sendBeamBrokenMessage>
				beamTimer = 50;
     950:	82 e3       	ldi	r24, 0x32	; 50
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 09 02 	sts	0x0209, r25
     958:	80 93 08 02 	sts	0x0208, r24
     95c:	08 95       	ret
			} else {
				--subCounter;
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	90 93 07 02 	sts	0x0207, r25
     964:	80 93 06 02 	sts	0x0206, r24
     968:	08 95       	ret
			}
		} else {
			beamTimer = 50; // * 100ms
     96a:	82 e3       	ldi	r24, 0x32	; 50
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 09 02 	sts	0x0209, r25
     972:	80 93 08 02 	sts	0x0208, r24
     976:	08 95       	ret
		}
	} else if( beamTimer > 0) {
     978:	80 91 08 02 	lds	r24, 0x0208
     97c:	90 91 09 02 	lds	r25, 0x0209
     980:	18 16       	cp	r1, r24
     982:	19 06       	cpc	r1, r25
     984:	d4 f4       	brge	.+52     	; 0x9ba <game_interrupt_handleIrBeam+0xaa>
		printf("-");
     986:	8d e2       	ldi	r24, 0x2D	; 45
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <putchar>
		--beamTimer;
     98e:	80 91 08 02 	lds	r24, 0x0208
     992:	90 91 09 02 	lds	r25, 0x0209
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	90 93 09 02 	sts	0x0209, r25
     99c:	80 93 08 02 	sts	0x0208, r24
		subCounter = 3;
     9a0:	23 e0       	ldi	r18, 0x03	; 3
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	30 93 07 02 	sts	0x0207, r19
     9a8:	20 93 06 02 	sts	0x0206, r18
		if( beamTimer == 0 ) {
     9ac:	89 2b       	or	r24, r25
     9ae:	79 f4       	brne	.+30     	; 0x9ce <game_interrupt_handleIrBeam+0xbe>
			printf("\nREADY\n");
     9b0:	8b e0       	ldi	r24, 0x0B	; 11
     9b2:	94 e0       	ldi	r25, 0x04	; 4
     9b4:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <puts>
     9b8:	08 95       	ret
		}
	} else {
		subCounter = 3;
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 07 02 	sts	0x0207, r25
     9c2:	80 93 06 02 	sts	0x0206, r24
		printf("=");
     9c6:	8d e3       	ldi	r24, 0x3D	; 61
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <putchar>
     9ce:	08 95       	ret

000009d0 <ir_init>:
boolean irBeamEnabled = false;
boolean irBeamReady = false;

void ir_init() {
	//Enable ADC
	SET_BIT(ADCSRA, ADEN);
     9d0:	aa e7       	ldi	r26, 0x7A	; 122
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	8c 91       	ld	r24, X
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	8c 93       	st	X, r24
	
	//set multiplexers, to enable one analog input (at spezific port)
	// --> writing MUX bits in ADMUX and ADCSRB
	//Set Bit3 of ADCSRB to 0
	CLEAR_BIT(ADCSRB, MUX5);
     9da:	eb e7       	ldi	r30, 0x7B	; 123
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	87 7f       	andi	r24, 0xF7	; 247
     9e2:	80 83       	st	Z, r24
	//set Bits4:0 in ADMUX to 0 -> to select ADC0 (PORT F) as input
	CLEAR_BIT(ADMUX, MUX0);
     9e4:	ec e7       	ldi	r30, 0x7C	; 124
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	80 83       	st	Z, r24
	CLEAR_BIT(ADMUX, MUX1);
     9ee:	80 81       	ld	r24, Z
     9f0:	8d 7f       	andi	r24, 0xFD	; 253
     9f2:	80 83       	st	Z, r24
	CLEAR_BIT(ADMUX, MUX2);
     9f4:	80 81       	ld	r24, Z
     9f6:	8b 7f       	andi	r24, 0xFB	; 251
     9f8:	80 83       	st	Z, r24
	CLEAR_BIT(ADMUX, MUX3);
     9fa:	80 81       	ld	r24, Z
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	80 83       	st	Z, r24
	CLEAR_BIT(ADMUX, MUX4);
     a00:	80 81       	ld	r24, Z
     a02:	8f 7e       	andi	r24, 0xEF	; 239
     a04:	80 83       	st	Z, r24

	//set Port as an input
	CLEAR_BIT(DDRF, PF0);
     a06:	80 98       	cbi	0x10, 0	; 16
	
	//start 
	SET_BIT(ADCSRA, ADSC); //single conversion
     a08:	8c 91       	ld	r24, X
     a0a:	80 64       	ori	r24, 0x40	; 64
     a0c:	8c 93       	st	X, r24
     a0e:	08 95       	ret

00000a10 <ir_enableBeam>:
	//SET_BIT(ADCSRA, ADATE);
}

void ir_enableBeam() {
	printf("IR-enabled\n"); 
     a10:	82 e1       	ldi	r24, 0x12	; 18
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <puts>
	irBeamEnabled = true;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	90 93 5e 05 	sts	0x055E, r25
     a20:	80 93 5d 05 	sts	0x055D, r24
     a24:	08 95       	ret

00000a26 <ir_disableBeam>:
}

void ir_disableBeam() {
	irBeamEnabled = false;
     a26:	10 92 5e 05 	sts	0x055E, r1
     a2a:	10 92 5d 05 	sts	0x055D, r1
	printf("IR-Beam disabled!\n");
     a2e:	8d e1       	ldi	r24, 0x1D	; 29
     a30:	94 e0       	ldi	r25, 0x04	; 4
     a32:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <puts>
     a36:	08 95       	ret

00000a38 <ir_detectBeamBlocked>:
}

boolean ir_detectBeamBlocked() {
	
	while(ADCSRA & (1<< ADSC)){
     a38:	ea e7       	ldi	r30, 0x7A	; 122
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	86 fd       	sbrc	r24, 6
     a40:	fd cf       	rjmp	.-6      	; 0xa3c <ir_detectBeamBlocked+0x4>
		//printf("waiting...\n");
	}
	
	char irL = ADCL;
     a42:	80 91 78 00 	lds	r24, 0x0078
	char irH = ADCH; //read both, to finish the conversion
     a46:	20 91 79 00 	lds	r18, 0x0079
	
	//printf("IRL: %d\n", irL);
	
	//set single conversation again
	SET_BIT(ADCSRA, ADSC); 
     a4a:	ea e7       	ldi	r30, 0x7A	; 122
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	90 81       	ld	r25, Z
     a50:	90 64       	ori	r25, 0x40	; 64
     a52:	90 83       	st	Z, r25
	//printf("irL: %d \t irH: %d \t", irL, irH);
	if(irL < 10 || irH != 0) {
     a54:	8a 30       	cpi	r24, 0x0A	; 10
     a56:	30 f0       	brcs	.+12     	; 0xa64 <ir_detectBeamBlocked+0x2c>
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	21 11       	cpse	r18, r1
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <ir_detectBeamBlocked+0x30>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret
		return true;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0

	}
	return false;
}
     a68:	08 95       	ret

00000a6a <init>:
#include "SOUND/sound.h"


int getCounter();
void init(){
	usart_init ( MYUBRR );
     a6a:	87 e6       	ldi	r24, 0x67	; 103
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	43 d4       	rcall	.+2182   	; 0x12f6 <usart_init>
	can_init();
     a70:	b0 db       	rcall	.-2208   	; 0x1d2 <can_init>
	pwm_init();
     a72:	bf d1       	rcall	.+894    	; 0xdf2 <pwm_init>
	ir_init();
     a74:	ad df       	rcall	.-166    	; 0x9d0 <ir_init>
	dac_init(); // Interrupts must be enabled	
     a76:	9d de       	rcall	.-710    	; 0x7b2 <dac_init>
	interrupts_init();
     a78:	97 d0       	rcall	.+302    	; 0xba8 <interrupts_init>
	timer_init();
     a7a:	50 d3       	rcall	.+1696   	; 0x111c <timer_init>
	solenoid_init();
     a7c:	fe d2       	rcall	.+1532   	; 0x107a <solenoid_init>
	sound_init(); 
     a7e:	32 d3       	rcall	.+1636   	; 0x10e4 <sound_init>
	sei(); 
     a80:	78 94       	sei
     a82:	08 95       	ret

00000a84 <main>:
}

int main(void) {

	init();
     a84:	f2 df       	rcall	.-28     	; 0xa6a <init>
	printf("Hello World I`m Node2\n");
     a86:	8f e2       	ldi	r24, 0x2F	; 47
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <puts>
    while(1) {
		
		can_handleRecievedMessages();
     a8e:	a9 dd       	rcall	.-1198   	; 0x5e2 <can_handleRecievedMessages>
		
		// a broken IR-beam is handled by interrupts 
		
		//ir_handleIrBeam();
		regulator_calculate();
     a90:	52 d2       	rcall	.+1188   	; 0xf36 <regulator_calculate>
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <main+0xa>

00000a94 <mcp_reset>:
     a94:	36 d3       	rcall	.+1644   	; 0x1102 <spi_startTransmision>
     a96:	80 ec       	ldi	r24, 0xC0	; 192
     a98:	38 d3       	rcall	.+1648   	; 0x110a <spi_transmitByte>
     a9a:	35 c3       	rjmp	.+1642   	; 0x1106 <spi_endTransmision>
     a9c:	08 95       	ret

00000a9e <mcp_init>:
     a9e:	fa cf       	rjmp	.-12     	; 0xa94 <mcp_reset>
     aa0:	08 95       	ret

00000aa2 <mcp_read>:
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	c8 2f       	mov	r28, r24
     ab0:	7b 01       	movw	r14, r22
     ab2:	8a 01       	movw	r16, r20
     ab4:	26 d3       	rcall	.+1612   	; 0x1102 <spi_startTransmision>
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	28 d3       	rcall	.+1616   	; 0x110a <spi_transmitByte>
     aba:	8c 2f       	mov	r24, r28
     abc:	26 d3       	rcall	.+1612   	; 0x110a <spi_transmitByte>
     abe:	10 16       	cp	r1, r16
     ac0:	11 06       	cpc	r1, r17
     ac2:	44 f4       	brge	.+16     	; 0xad4 <mcp_read+0x32>
     ac4:	e7 01       	movw	r28, r14
     ac6:	0e 0d       	add	r16, r14
     ac8:	1f 1d       	adc	r17, r15
     aca:	24 d3       	rcall	.+1608   	; 0x1114 <spi_readByte>
     acc:	89 93       	st	Y+, r24
     ace:	c0 17       	cp	r28, r16
     ad0:	d1 07       	cpc	r29, r17
     ad2:	d9 f7       	brne	.-10     	; 0xaca <mcp_read+0x28>
     ad4:	18 d3       	rcall	.+1584   	; 0x1106 <spi_endTransmision>
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <mcp_write>:
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	c8 2f       	mov	r28, r24
     af2:	7b 01       	movw	r14, r22
     af4:	8a 01       	movw	r16, r20
     af6:	05 d3       	rcall	.+1546   	; 0x1102 <spi_startTransmision>
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	07 d3       	rcall	.+1550   	; 0x110a <spi_transmitByte>
     afc:	8c 2f       	mov	r24, r28
     afe:	05 d3       	rcall	.+1546   	; 0x110a <spi_transmitByte>
     b00:	10 16       	cp	r1, r16
     b02:	11 06       	cpc	r1, r17
     b04:	44 f4       	brge	.+16     	; 0xb16 <mcp_write+0x32>
     b06:	e7 01       	movw	r28, r14
     b08:	0e 0d       	add	r16, r14
     b0a:	1f 1d       	adc	r17, r15
     b0c:	89 91       	ld	r24, Y+
     b0e:	fd d2       	rcall	.+1530   	; 0x110a <spi_transmitByte>
     b10:	c0 17       	cp	r28, r16
     b12:	d1 07       	cpc	r29, r17
     b14:	d9 f7       	brne	.-10     	; 0xb0c <mcp_write+0x28>
     b16:	f7 d2       	rcall	.+1518   	; 0x1106 <spi_endTransmision>
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <mcp_requestToSend>:
     b26:	cf 93       	push	r28
     b28:	c8 2f       	mov	r28, r24
     b2a:	eb d2       	rcall	.+1494   	; 0x1102 <spi_startTransmision>
     b2c:	c1 11       	cpse	r28, r1
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <mcp_requestToSend+0x10>
     b30:	81 e8       	ldi	r24, 0x81	; 129
     b32:	eb d2       	rcall	.+1494   	; 0x110a <spi_transmitByte>
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <mcp_requestToSend+0x2c>
     b36:	c1 30       	cpi	r28, 0x01	; 1
     b38:	19 f4       	brne	.+6      	; 0xb40 <mcp_requestToSend+0x1a>
     b3a:	82 e8       	ldi	r24, 0x82	; 130
     b3c:	e6 d2       	rcall	.+1484   	; 0x110a <spi_transmitByte>
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <mcp_requestToSend+0x2c>
     b40:	c2 30       	cpi	r28, 0x02	; 2
     b42:	19 f4       	brne	.+6      	; 0xb4a <mcp_requestToSend+0x24>
     b44:	84 e8       	ldi	r24, 0x84	; 132
     b46:	e1 d2       	rcall	.+1474   	; 0x110a <spi_transmitByte>
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <mcp_requestToSend+0x2c>
     b4a:	c3 30       	cpi	r28, 0x03	; 3
     b4c:	11 f4       	brne	.+4      	; 0xb52 <mcp_requestToSend+0x2c>
     b4e:	87 e8       	ldi	r24, 0x87	; 135
     b50:	dc d2       	rcall	.+1464   	; 0x110a <spi_transmitByte>
     b52:	d9 d2       	rcall	.+1458   	; 0x1106 <spi_endTransmision>
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <mcp_readStatus>:
     b58:	cf 93       	push	r28
     b5a:	d3 d2       	rcall	.+1446   	; 0x1102 <spi_startTransmision>
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	d5 d2       	rcall	.+1450   	; 0x110a <spi_transmitByte>
     b60:	d9 d2       	rcall	.+1458   	; 0x1114 <spi_readByte>
     b62:	c8 2f       	mov	r28, r24
     b64:	d0 d2       	rcall	.+1440   	; 0x1106 <spi_endTransmision>
     b66:	8c 2f       	mov	r24, r28
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <mcp_bitModify>:
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	18 2f       	mov	r17, r24
     b74:	d6 2f       	mov	r29, r22
     b76:	c4 2f       	mov	r28, r20
     b78:	c4 d2       	rcall	.+1416   	; 0x1102 <spi_startTransmision>
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	c6 d2       	rcall	.+1420   	; 0x110a <spi_transmitByte>
     b7e:	81 2f       	mov	r24, r17
     b80:	c4 d2       	rcall	.+1416   	; 0x110a <spi_transmitByte>
     b82:	8d 2f       	mov	r24, r29
     b84:	c2 d2       	rcall	.+1412   	; 0x110a <spi_transmitByte>
     b86:	8c 2f       	mov	r24, r28
     b88:	c0 d2       	rcall	.+1408   	; 0x110a <spi_transmitByte>
     b8a:	bd d2       	rcall	.+1402   	; 0x1106 <spi_endTransmision>
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	08 95       	ret

00000b94 <__vector_default>:
     b94:	1f 92       	push	r1
     b96:	0f 92       	push	r0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <interrupts_init>:
}
void interrupts_init(){

	#ifdef INTERRUPTS
	
	interrupts_usart_init();
     ba8:	c5 d0       	rcall	.+394    	; 0xd34 <interrupts_usart_init>

	interrupts_timer_init();
     baa:	6f d0       	rcall	.+222    	; 0xc8a <interrupts_timer_init>

	sei();
     bac:	78 94       	sei
     bae:	08 95       	ret

00000bb0 <_setTimerInterruptMode>:
int getCounter(){
	return counter;
}
int getOverflow(){
	return overflow;
}
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	c0 e9       	ldi	r28, 0x90	; 144
     bb6:	d0 e0       	ldi	r29, 0x00	; 0
     bb8:	88 81       	ld	r24, Y
     bba:	8c 7f       	andi	r24, 0xFC	; 252
     bbc:	88 83       	st	Y, r24
     bbe:	e1 e9       	ldi	r30, 0x91	; 145
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	80 83       	st	Z, r24
     bc8:	80 81       	ld	r24, Z
     bca:	88 60       	ori	r24, 0x08	; 8
     bcc:	80 83       	st	Z, r24
     bce:	88 81       	ld	r24, Y
     bd0:	1f 92       	push	r1
     bd2:	8f 93       	push	r24
     bd4:	85 e4       	ldi	r24, 0x45	; 69
     bd6:	94 e0       	ldi	r25, 0x04	; 4
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	df d7       	rcall	.+4030   	; 0x1b9c <printf>
     bde:	88 81       	ld	r24, Y
     be0:	80 6c       	ori	r24, 0xC0	; 192
     be2:	88 83       	st	Y, r24
     be4:	88 81       	ld	r24, Y
     be6:	1f 92       	push	r1
     be8:	8f 93       	push	r24
     bea:	82 e5       	ldi	r24, 0x52	; 82
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	d4 d7       	rcall	.+4008   	; 0x1b9c <printf>
     bf4:	8d b7       	in	r24, 0x3d	; 61
     bf6:	9e b7       	in	r25, 0x3e	; 62
     bf8:	08 96       	adiw	r24, 0x08	; 8
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	9e bf       	out	0x3e, r25	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	8d bf       	out	0x3d, r24	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <_setPrescaler>:
     c0a:	e1 e9       	ldi	r30, 0x91	; 145
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	83 60       	ori	r24, 0x03	; 3
     c12:	80 83       	st	Z, r24
     c14:	08 95       	ret

00000c16 <_setTimerValue>:
     c16:	dc 01       	movw	r26, r24
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	34 e2       	ldi	r19, 0x24	; 36
     c1c:	44 ef       	ldi	r20, 0xF4	; 244
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	f7 d5       	rcall	.+3054   	; 0x1810 <__mulshisi3>
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	38 ee       	ldi	r19, 0xE8	; 232
     c26:	43 e0       	ldi	r20, 0x03	; 3
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	d0 d5       	rcall	.+2976   	; 0x17cc <__divmodsi4>
     c2c:	82 2f       	mov	r24, r18
     c2e:	93 2f       	mov	r25, r19
     c30:	e8 e9       	ldi	r30, 0x98	; 152
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	5f 93       	push	r21
     c3e:	4f 93       	push	r20
     c40:	3f 93       	push	r19
     c42:	2f 93       	push	r18
     c44:	9f 93       	push	r25
     c46:	8f 93       	push	r24
     c48:	89 e7       	ldi	r24, 0x79	; 121
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	9f 93       	push	r25
     c4e:	8f 93       	push	r24
     c50:	a5 d7       	rcall	.+3914   	; 0x1b9c <printf>
     c52:	8d b7       	in	r24, 0x3d	; 61
     c54:	9e b7       	in	r25, 0x3e	; 62
     c56:	08 96       	adiw	r24, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	9e bf       	out	0x3e, r25	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	8d bf       	out	0x3d, r24	; 61
     c62:	08 95       	ret

00000c64 <_enableTimerInterrupts>:
     c64:	e1 e7       	ldi	r30, 0x71	; 113
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 62       	ori	r24, 0x20	; 32
     c6c:	80 83       	st	Z, r24
     c6e:	80 81       	ld	r24, Z
     c70:	82 60       	ori	r24, 0x02	; 2
     c72:	80 83       	st	Z, r24
     c74:	80 81       	ld	r24, Z
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	80 83       	st	Z, r24
     c7a:	10 92 95 00 	sts	0x0095, r1
     c7e:	10 92 94 00 	sts	0x0094, r1
     c82:	8c ea       	ldi	r24, 0xAC	; 172
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	a0 c7       	rjmp	.+3904   	; 0x1bc8 <puts>
     c88:	08 95       	ret

00000c8a <interrupts_timer_init>:
     c8a:	bf df       	rcall	.-130    	; 0xc0a <_setPrescaler>
     c8c:	82 e3       	ldi	r24, 0x32	; 50
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	c2 df       	rcall	.-124    	; 0xc16 <_setTimerValue>
     c92:	8e df       	rcall	.-228    	; 0xbb0 <_setTimerInterruptMode>
     c94:	e7 df       	rcall	.-50     	; 0xc64 <_enableTimerInterrupts>
     c96:	85 ec       	ldi	r24, 0xC5	; 197
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	96 c7       	rjmp	.+3884   	; 0x1bc8 <puts>
     c9c:	08 95       	ret

00000c9e <__vector_32>:
//___________________________________________________


 

ISR(TIMER3_COMPA_vect, ISR_NOBLOCK){ // It seems like the interrupts might mess with _delay(), causing an infinite loop in some cases
     c9e:	78 94       	sei
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	0b b6       	in	r0, 0x3b	; 59
     cac:	0f 92       	push	r0
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31

	game_interrupt_handleIrBeam();
     cc6:	24 de       	rcall	.-952    	; 0x910 <game_interrupt_handleIrBeam>
	game_handelPoints(); 
     cc8:	b1 dd       	rcall	.-1182   	; 0x82c <game_handelPoints>
	solenoid_interrupt_handlePush();
     cca:	de d1       	rcall	.+956    	; 0x1088 <solenoid_interrupt_handlePush>

	++counter;  // Just example-code to show the interrupts are able to count
     ccc:	80 91 61 05 	lds	r24, 0x0561
     cd0:	90 91 62 05 	lds	r25, 0x0562
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	90 93 62 05 	sts	0x0562, r25
     cda:	80 93 61 05 	sts	0x0561, r24

}
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0b be       	out	0x3b, r0	; 59
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_35>:


ISR(TIMER3_OVF_vect, ISR_NOBLOCK){
     d04:	78 94       	sei
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	8f 93       	push	r24
     d12:	9f 93       	push	r25
	//printf("*"); // To show an error has occured
	++overflow;
     d14:	80 91 5f 05 	lds	r24, 0x055F
     d18:	90 91 60 05 	lds	r25, 0x0560
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	90 93 60 05 	sts	0x0560, r25
     d22:	80 93 5f 05 	sts	0x055F, r24
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <interrupts_usart_init>:




void interrupts_usart_init(){
	usart_init(MYUBRR); // Must be run for the interrupt-based USART to work
     d34:	87 e6       	ldi	r24, 0x67	; 103
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	de d2       	rcall	.+1468   	; 0x12f6 <usart_init>
		UCSR0B |= (1<< RXCIE0)|(1<< TXCIE0)|(1<< RXEN0)| (1<<TXEN0 ); // Enable Interrupts for transmiting and receiving , enable receiving and transmitting
		fdevopen(interrupt_usart_putchar, usart_getchar);
		sei();
		printf("Enabled usart-interrupts\n");
	#else
		printf_char("USART-interrupts NOT enabled\n"); // printf_char does not run on interrupts
     d3a:	8f ed       	ldi	r24, 0xDF	; 223
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	ee c2       	rjmp	.+1500   	; 0x131c <printf_char>
     d40:	08 95       	ret

00000d42 <parser_handleRecievedMessages>:
#include "../IR_D/irDiodes.h"
#include "../GAME/game.h"
int makeSignedInt(char input);
void parser_printJoystickPosition(char data[]);

void parser_handleRecievedMessages(struct can_message* msg) {
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	int id = msg->id;
	switch(id){	
     d48:	28 81       	ld	r18, Y
     d4a:	39 81       	ldd	r19, Y+1	; 0x01
     d4c:	23 30       	cpi	r18, 0x03	; 3
     d4e:	31 05       	cpc	r19, r1
     d50:	29 f1       	breq	.+74     	; 0xd9c <parser_handleRecievedMessages+0x5a>
     d52:	3c f4       	brge	.+14     	; 0xd62 <parser_handleRecievedMessages+0x20>
     d54:	21 30       	cpi	r18, 0x01	; 1
     d56:	31 05       	cpc	r19, r1
     d58:	61 f0       	breq	.+24     	; 0xd72 <parser_handleRecievedMessages+0x30>
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	99 f0       	breq	.+38     	; 0xd86 <parser_handleRecievedMessages+0x44>
     d60:	42 c0       	rjmp	.+132    	; 0xde6 <parser_handleRecievedMessages+0xa4>
     d62:	24 30       	cpi	r18, 0x04	; 4
     d64:	31 05       	cpc	r19, r1
     d66:	f9 f0       	breq	.+62     	; 0xda6 <parser_handleRecievedMessages+0x64>
     d68:	25 30       	cpi	r18, 0x05	; 5
     d6a:	31 05       	cpc	r19, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <parser_handleRecievedMessages+0x2e>
     d6e:	38 c0       	rjmp	.+112    	; 0xde0 <parser_handleRecievedMessages+0x9e>
     d70:	3a c0       	rjmp	.+116    	; 0xde6 <parser_handleRecievedMessages+0xa4>
		case(ID_JOYSTICK_POSITION):
			regulator_setReference(makeSignedInt(msg->data[0]));
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
}


// Makes an 8-bit char into a signed int
int makeSignedInt(char input){
	if (input & 0x80){
     d74:	88 23       	and	r24, r24
     d76:	24 f4       	brge	.+8      	; 0xd80 <parser_handleRecievedMessages+0x3e>
		return -255+ (int)input;
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	91 09       	sbc	r25, r1
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <parser_handleRecievedMessages+0x40>
	}
	else{
		return (int)input;
     d80:	90 e0       	ldi	r25, 0x00	; 0

void parser_handleRecievedMessages(struct can_message* msg) {
	int id = msg->id;
	switch(id){	
		case(ID_JOYSTICK_POSITION):
			regulator_setReference(makeSignedInt(msg->data[0]));
     d82:	94 d0       	rcall	.+296    	; 0xeac <regulator_setReference>
			break;
     d84:	33 c0       	rjmp	.+102    	; 0xdec <parser_handleRecievedMessages+0xaa>
		case(ID_GAME):
			if(msg->data[0] != 0) {
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	88 23       	and	r24, r24
     d8a:	11 f0       	breq	.+4      	; 0xd90 <parser_handleRecievedMessages+0x4e>
				game_initNewGame(msg->data[0]);
     d8c:	93 dd       	rcall	.-1242   	; 0x8b4 <game_initNewGame>
     d8e:	2e c0       	rjmp	.+92     	; 0xdec <parser_handleRecievedMessages+0xaa>
			} else {
				game_endGame(); 
     d90:	9b dd       	rcall	.-1226   	; 0x8c8 <game_endGame>
				regulator_setReference(0);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	8a d0       	rcall	.+276    	; 0xeac <regulator_setReference>
				pwm_setDefault();
     d98:	82 d0       	rcall	.+260    	; 0xe9e <pwm_setDefault>
     d9a:	28 c0       	rjmp	.+80     	; 0xdec <parser_handleRecievedMessages+0xaa>
			}
			break;
		case(ID_RIGHT_BUTTON):
			//call function which generates the pulse
			printf("right Button pushed!\n");
     d9c:	8d ef       	ldi	r24, 0xFD	; 253
     d9e:	94 e0       	ldi	r25, 0x04	; 4
     da0:	13 d7       	rcall	.+3622   	; 0x1bc8 <puts>
			solenoid_generatePush();
     da2:	87 d1       	rcall	.+782    	; 0x10b2 <solenoid_generatePush>
			break;
     da4:	23 c0       	rjmp	.+70     	; 0xdec <parser_handleRecievedMessages+0xaa>
		case(ID_RIGHT_SLIDER):
			//printf("SLIDER\n");
			printf("RightSlider: %d\n", makeSignedInt(msg->data[0]));
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
}


// Makes an 8-bit char into a signed int
int makeSignedInt(char input){
	if (input & 0x80){
     da8:	88 23       	and	r24, r24
     daa:	24 f4       	brge	.+8      	; 0xdb4 <parser_handleRecievedMessages+0x72>
		return -255+ (int)input;
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	91 09       	sbc	r25, r1
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <parser_handleRecievedMessages+0x74>
	}
	else{
		return (int)input;
     db4:	90 e0       	ldi	r25, 0x00	; 0
			printf("right Button pushed!\n");
			solenoid_generatePush();
			break;
		case(ID_RIGHT_SLIDER):
			//printf("SLIDER\n");
			printf("RightSlider: %d\n", makeSignedInt(msg->data[0]));
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	82 e1       	ldi	r24, 0x12	; 18
     dbc:	95 e0       	ldi	r25, 0x05	; 5
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	ec d6       	rcall	.+3544   	; 0x1b9c <printf>
			pwm_controlDutyCycle(makeSignedInt(msg->data[0]));
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
}


// Makes an 8-bit char into a signed int
int makeSignedInt(char input){
	if (input & 0x80){
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	88 23       	and	r24, r24
     dd0:	24 f4       	brge	.+8      	; 0xdda <parser_handleRecievedMessages+0x98>
		return -255+ (int)input;
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	91 09       	sbc	r25, r1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <parser_handleRecievedMessages+0x9a>
	}
	else{
		return (int)input;
     dda:	90 e0       	ldi	r25, 0x00	; 0
			solenoid_generatePush();
			break;
		case(ID_RIGHT_SLIDER):
			//printf("SLIDER\n");
			printf("RightSlider: %d\n", makeSignedInt(msg->data[0]));
			pwm_controlDutyCycle(makeSignedInt(msg->data[0]));
     ddc:	38 d0       	rcall	.+112    	; 0xe4e <pwm_controlDutyCycle>
			break;
     dde:	06 c0       	rjmp	.+12     	; 0xdec <parser_handleRecievedMessages+0xaa>
		case(ID_OPTIONS):
			regulator_tuneSpeed(msg->data[0]);
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	7b d0       	rcall	.+246    	; 0xeda <regulator_tuneSpeed>
			break;
     de4:	03 c0       	rjmp	.+6      	; 0xdec <parser_handleRecievedMessages+0xaa>
		default:
			printf("Unknown message-ID\n");
     de6:	83 e2       	ldi	r24, 0x23	; 35
     de8:	95 e0       	ldi	r25, 0x05	; 5
     dea:	ee d6       	rcall	.+3548   	; 0x1bc8 <puts>
			break;
	}
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <pwm_init>:
	// 3) Set the prescaler and the TOP-value to be period of the PWM is 0.02s
	// 4) Enable Interrupts ????
	
	// 1)	
	// Set timer 1 to fast PWM-mode: WGMn3:0 = 0b1110 -> TOP = ICRn (with n = 1) ( better when TOP is rareely changed ) 
	CLEAR_BIT( TCCR1A, WGM10); // <- If set, OCRnA is used as TOP, if cleared ICRn is used instead
     df2:	a0 e8       	ldi	r26, 0x80	; 128
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	8c 91       	ld	r24, X
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	8c 93       	st	X, r24
	SET_BIT( TCCR1A, WGM11);
     dfc:	8c 91       	ld	r24, X
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	8c 93       	st	X, r24
	SET_BIT( TCCR1B, WGM12);
     e02:	e1 e8       	ldi	r30, 0x81	; 129
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	80 83       	st	Z, r24
	SET_BIT( TCCR1B, WGM13);
     e0c:	80 81       	ld	r24, Z
     e0e:	80 61       	ori	r24, 0x10	; 16
     e10:	80 83       	st	Z, r24
	
	// 2)
	// Set OC1B (Port B pin 6) as the output of the PWM-signal in Non-inverted PWM-mode
	CLEAR_BIT( TCCR1A, COM1B0);
     e12:	8c 91       	ld	r24, X
     e14:	8f 7e       	andi	r24, 0xEF	; 239
     e16:	8c 93       	st	X, r24
	SET_BIT( TCCR1A, COM1B1);
     e18:	8c 91       	ld	r24, X
     e1a:	80 62       	ori	r24, 0x20	; 32
     e1c:	8c 93       	st	X, r24
	SET_BIT(DDRB, 6); // Set the pin OC1B as an output
     e1e:	26 9a       	sbi	0x04, 6	; 4

	// 3)
	// Set clock prescaler to 1/8 ( the clock-counter increments at 1/8 of the rate )
	CLEAR_BIT(TCCR1B, CS10);
     e20:	80 81       	ld	r24, Z
     e22:	8e 7f       	andi	r24, 0xFE	; 254
     e24:	80 83       	st	Z, r24
	SET_BIT(TCCR1B, CS11);
     e26:	80 81       	ld	r24, Z
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	80 83       	st	Z, r24
	CLEAR_BIT(TCCR1B, CS12);
     e2c:	80 81       	ld	r24, Z
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	80 83       	st	Z, r24

	// Set the value of TOP so that it is reached after 20ms (50Hz), clock-frequency = 16 MHz
	ICR1 =  TOP_TIMER_1;
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	9c e9       	ldi	r25, 0x9C	; 156
     e36:	90 93 87 00 	sts	0x0087, r25
     e3a:	80 93 86 00 	sts	0x0086, r24
	
	// 4) ?
	sei();
     e3e:	78 94       	sei
	
	//set PWm to default
	OCR1B = PWM_CENTER;
     e40:	88 eb       	ldi	r24, 0xB8	; 184
     e42:	9b e0       	ldi	r25, 0x0B	; 11
     e44:	90 93 8b 00 	sts	0x008B, r25
     e48:	80 93 8a 00 	sts	0x008A, r24
     e4c:	08 95       	ret

00000e4e <pwm_controlDutyCycle>:
}

void pwm_controlDutyCycle(int joystickX) {
     e4e:	8c 39       	cpi	r24, 0x9C	; 156
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	92 07       	cpc	r25, r18
     e54:	14 f4       	brge	.+4      	; 0xe5a <pwm_controlDutyCycle+0xc>
     e56:	8c e9       	ldi	r24, 0x9C	; 156
     e58:	9f ef       	ldi	r25, 0xFF	; 255
     e5a:	bc 01       	movw	r22, r24
     e5c:	85 36       	cpi	r24, 0x65	; 101
     e5e:	91 05       	cpc	r25, r1
     e60:	14 f0       	brlt	.+4      	; 0xe66 <pwm_controlDutyCycle+0x18>
     e62:	64 e6       	ldi	r22, 0x64	; 100
     e64:	70 e0       	ldi	r23, 0x00	; 0
		joystickX = 100;
	} else if(joystickX < -100){
		joystickX = -100;
	}
	
	double joystickX_percent = joystickX/100.0;
     e66:	88 27       	eor	r24, r24
     e68:	77 fd       	sbrc	r23, 7
     e6a:	80 95       	com	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	84 d3       	rcall	.+1800   	; 0x1578 <__floatsisf>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	48 ec       	ldi	r20, 0xC8	; 200
     e76:	52 e4       	ldi	r21, 0x42	; 66
     e78:	e4 d2       	rcall	.+1480   	; 0x1442 <__divsf3>
	
	//"Minus" because of direction
	double triggerPoint = PWM_CENTER - (joystickX_percent * PWM_RANGE);
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	4a e7       	ldi	r20, 0x7A	; 122
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	2e d4       	rcall	.+2140   	; 0x16e0 <__mulsf3>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e8       	ldi	r23, 0x80	; 128
     e8c:	8b e3       	ldi	r24, 0x3B	; 59
     e8e:	95 e4       	ldi	r25, 0x45	; 69
     e90:	6f d2       	rcall	.+1246   	; 0x1370 <__subsf3>
	OCR1B = triggerPoint;
     e92:	44 d3       	rcall	.+1672   	; 0x151c <__fixunssfsi>
     e94:	70 93 8b 00 	sts	0x008B, r23
     e98:	60 93 8a 00 	sts	0x008A, r22
     e9c:	08 95       	ret

00000e9e <pwm_setDefault>:
}

void pwm_setDefault() {
	OCR1B = PWM_CENTER;
     e9e:	88 eb       	ldi	r24, 0xB8	; 184
     ea0:	9b e0       	ldi	r25, 0x0B	; 11
     ea2:	90 93 8b 00 	sts	0x008B, r25
     ea6:	80 93 8a 00 	sts	0x008A, r24
     eaa:	08 95       	ret

00000eac <regulator_setReference>:

static double K_p_PI = 3; 
static double K_i_PI = 0; 

void regulator_setReference(int newReference){
	reference = newReference; 
     eac:	90 93 64 05 	sts	0x0564, r25
     eb0:	80 93 63 05 	sts	0x0563, r24
     eb4:	08 95       	ret

00000eb6 <regulator_init>:
//float reference;
int encoderOld, encoderDifference;
int integral;

void regulator_init(float P, float I) {
	Kp = P;
     eb6:	60 93 76 05 	sts	0x0576, r22
     eba:	70 93 77 05 	sts	0x0577, r23
     ebe:	80 93 78 05 	sts	0x0578, r24
     ec2:	90 93 79 05 	sts	0x0579, r25
	Ki = I;
     ec6:	20 93 72 05 	sts	0x0572, r18
     eca:	30 93 73 05 	sts	0x0573, r19
     ece:	40 93 74 05 	sts	0x0574, r20
     ed2:	50 93 75 05 	sts	0x0575, r21
	timer_init();
     ed6:	22 c1       	rjmp	.+580    	; 0x111c <timer_init>
     ed8:	08 95       	ret

00000eda <regulator_tuneSpeed>:
}

void regulator_tuneSpeed(signed char slider) {
	char percentage = (slider + 100) / 2;
     eda:	99 27       	eor	r25, r25
     edc:	87 fd       	sbrc	r24, 7
     ede:	90 95       	com	r25
     ee0:	8c 59       	subi	r24, 0x9C	; 156
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	bc 01       	movw	r22, r24
     ee6:	99 23       	and	r25, r25
     ee8:	14 f4       	brge	.+4      	; 0xeee <regulator_tuneSpeed+0x14>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	75 95       	asr	r23
     ef0:	67 95       	ror	r22
	Kp = (float) percentage / 100.0;
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	3d d3       	rcall	.+1658   	; 0x1574 <__floatunsisf>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 ec       	ldi	r20, 0xC8	; 200
     f00:	52 e4       	ldi	r21, 0x42	; 66
     f02:	9f d2       	rcall	.+1342   	; 0x1442 <__divsf3>
     f04:	60 93 76 05 	sts	0x0576, r22
     f08:	70 93 77 05 	sts	0x0577, r23
     f0c:	80 93 78 05 	sts	0x0578, r24
     f10:	90 93 79 05 	sts	0x0579, r25
     f14:	08 95       	ret

00000f16 <regulator_updateEncoder>:
}

// HUBI's STUFF
// ____________________________________________
void regulator_updateEncoder(int enc) {
	encoderDifference = enc - encoderOld;
     f16:	20 91 70 05 	lds	r18, 0x0570
     f1a:	30 91 71 05 	lds	r19, 0x0571
     f1e:	ac 01       	movw	r20, r24
     f20:	42 1b       	sub	r20, r18
     f22:	53 0b       	sbc	r21, r19
     f24:	50 93 7b 05 	sts	0x057B, r21
     f28:	40 93 7a 05 	sts	0x057A, r20
	encoderOld = enc;
     f2c:	90 93 71 05 	sts	0x0571, r25
     f30:	80 93 70 05 	sts	0x0570, r24
     f34:	08 95       	ret

00000f36 <regulator_calculate>:
}

void regulator_calculate() {
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
	
	if(reference == 0) {
     f46:	80 91 63 05 	lds	r24, 0x0563
     f4a:	90 91 64 05 	lds	r25, 0x0564
     f4e:	89 2b       	or	r24, r25
     f50:	21 f4       	brne	.+8      	; 0xf5a <regulator_calculate+0x24>
		integral = 0;
     f52:	10 92 7d 05 	sts	0x057D, r1
     f56:	10 92 7c 05 	sts	0x057C, r1
	}
	
	int dt = timer_get(); //time since last call
     f5a:	eb d0       	rcall	.+470    	; 0x1132 <timer_get>
     f5c:	ec 01       	movw	r28, r24
	//printf("dt: %d\n", (int)dt );
	
	timer_reset();
     f5e:	ee d0       	rcall	.+476    	; 0x113c <timer_reset>
	
	int currentSpeed = encoderDifference/dt; //can be negative
	//printf("currentSpeed: %d\n", (int)currentSpeed );
	
	int wantedSpeed = (reference*REGULATOR_MAX_SPEED)/100.0;
     f60:	00 91 63 05 	lds	r16, 0x0563
     f64:	10 91 64 05 	lds	r17, 0x0564
     f68:	82 e3       	ldi	r24, 0x32	; 50
     f6a:	80 9f       	mul	r24, r16
     f6c:	b0 01       	movw	r22, r0
     f6e:	81 9f       	mul	r24, r17
     f70:	70 0d       	add	r23, r0
     f72:	11 24       	eor	r1, r1
     f74:	88 27       	eor	r24, r24
     f76:	77 fd       	sbrc	r23, 7
     f78:	80 95       	com	r24
     f7a:	98 2f       	mov	r25, r24
     f7c:	fd d2       	rcall	.+1530   	; 0x1578 <__floatsisf>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	48 ec       	ldi	r20, 0xC8	; 200
     f84:	52 e4       	ldi	r21, 0x42	; 66
     f86:	5d d2       	rcall	.+1210   	; 0x1442 <__divsf3>
     f88:	c4 d2       	rcall	.+1416   	; 0x1512 <__fixsfsi>
     f8a:	6b 01       	movw	r12, r22
     f8c:	7c 01       	movw	r14, r24
	int dt = timer_get(); //time since last call
	//printf("dt: %d\n", (int)dt );
	
	timer_reset();
	
	int currentSpeed = encoderDifference/dt; //can be negative
     f8e:	80 91 7a 05 	lds	r24, 0x057A
     f92:	90 91 7b 05 	lds	r25, 0x057B
     f96:	be 01       	movw	r22, r28
     f98:	06 d4       	rcall	.+2060   	; 0x17a6 <__divmodhi4>
	//printf("currentSpeed: %d\n", (int)currentSpeed );
	
	int wantedSpeed = (reference*REGULATOR_MAX_SPEED)/100.0;
	
	int error = wantedSpeed - currentSpeed; 
     f9a:	c6 1a       	sub	r12, r22
     f9c:	d7 0a       	sbc	r13, r23
	//printf("Error: %d\n", (int)error);
	
	integral += (error * dt)/100;
     f9e:	cc 9e       	mul	r12, r28
     fa0:	c0 01       	movw	r24, r0
     fa2:	cd 9e       	mul	r12, r29
     fa4:	90 0d       	add	r25, r0
     fa6:	dc 9e       	mul	r13, r28
     fa8:	90 0d       	add	r25, r0
     faa:	11 24       	eor	r1, r1
     fac:	64 e6       	ldi	r22, 0x64	; 100
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	fa d3       	rcall	.+2036   	; 0x17a6 <__divmodhi4>
     fb2:	80 91 7c 05 	lds	r24, 0x057C
     fb6:	90 91 7d 05 	lds	r25, 0x057D
     fba:	eb 01       	movw	r28, r22
     fbc:	c8 0f       	add	r28, r24
     fbe:	d9 1f       	adc	r29, r25
     fc0:	d0 93 7d 05 	sts	0x057D, r29
     fc4:	c0 93 7c 05 	sts	0x057C, r28
	//printf("Integral: %d\n", integral);
	
	float result = reference*Kp + Ki*integral;
     fc8:	b8 01       	movw	r22, r16
     fca:	88 27       	eor	r24, r24
     fcc:	77 fd       	sbrc	r23, 7
     fce:	80 95       	com	r24
     fd0:	98 2f       	mov	r25, r24
     fd2:	d2 d2       	rcall	.+1444   	; 0x1578 <__floatsisf>
     fd4:	20 91 76 05 	lds	r18, 0x0576
     fd8:	30 91 77 05 	lds	r19, 0x0577
     fdc:	40 91 78 05 	lds	r20, 0x0578
     fe0:	50 91 79 05 	lds	r21, 0x0579
     fe4:	7d d3       	rcall	.+1786   	; 0x16e0 <__mulsf3>
     fe6:	6b 01       	movw	r12, r22
     fe8:	7c 01       	movw	r14, r24
     fea:	be 01       	movw	r22, r28
     fec:	88 27       	eor	r24, r24
     fee:	77 fd       	sbrc	r23, 7
     ff0:	80 95       	com	r24
     ff2:	98 2f       	mov	r25, r24
     ff4:	c1 d2       	rcall	.+1410   	; 0x1578 <__floatsisf>
     ff6:	20 91 72 05 	lds	r18, 0x0572
     ffa:	30 91 73 05 	lds	r19, 0x0573
     ffe:	40 91 74 05 	lds	r20, 0x0574
    1002:	50 91 75 05 	lds	r21, 0x0575
    1006:	6c d3       	rcall	.+1752   	; 0x16e0 <__mulsf3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	c7 01       	movw	r24, r14
    100e:	b6 01       	movw	r22, r12
    1010:	b0 d1       	rcall	.+864    	; 0x1372 <__addsf3>
    1012:	6b 01       	movw	r12, r22
    1014:	7c 01       	movw	r14, r24
	//printf("P: %d\n", (int) error);
	
	if(result > 100) {
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	48 ec       	ldi	r20, 0xC8	; 200
    101c:	52 e4       	ldi	r21, 0x42	; 66
    101e:	5c d3       	rcall	.+1720   	; 0x16d8 <__gesf2>
    1020:	18 16       	cp	r1, r24
    1022:	54 f0       	brlt	.+20     	; 0x1038 <regulator_calculate+0x102>
		result = 100;
	} else if (result < -100) {
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	48 ec       	ldi	r20, 0xC8	; 200
    102a:	52 ec       	ldi	r21, 0xC2	; 194
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
    1030:	04 d2       	rcall	.+1032   	; 0x143a <__cmpsf2>
    1032:	88 23       	and	r24, r24
    1034:	54 f0       	brlt	.+20     	; 0x104a <regulator_calculate+0x114>
    1036:	11 c0       	rjmp	.+34     	; 0x105a <regulator_calculate+0x124>
	
	float result = reference*Kp + Ki*integral;
	//printf("P: %d\n", (int) error);
	
	if(result > 100) {
		result = 100;
    1038:	0f 2e       	mov	r0, r31
    103a:	c1 2c       	mov	r12, r1
    103c:	d1 2c       	mov	r13, r1
    103e:	f8 ec       	ldi	r31, 0xC8	; 200
    1040:	ef 2e       	mov	r14, r31
    1042:	f2 e4       	ldi	r31, 0x42	; 66
    1044:	ff 2e       	mov	r15, r31
    1046:	f0 2d       	mov	r31, r0
    1048:	08 c0       	rjmp	.+16     	; 0x105a <regulator_calculate+0x124>
	} else if (result < -100) {
		result = -100;
    104a:	0f 2e       	mov	r0, r31
    104c:	c1 2c       	mov	r12, r1
    104e:	d1 2c       	mov	r13, r1
    1050:	f8 ec       	ldi	r31, 0xC8	; 200
    1052:	ef 2e       	mov	r14, r31
    1054:	f2 ec       	ldi	r31, 0xC2	; 194
    1056:	ff 2e       	mov	r15, r31
    1058:	f0 2d       	mov	r31, r0
	}
	
	//printf( "(wanted speed, currentSpeed): (%d, %d)\n ", (int)wantedSpeed, (int)currentSpeed); 
	dac_conrolMotor(result);
    105a:	c7 01       	movw	r24, r14
    105c:	b6 01       	movw	r22, r12
    105e:	59 d2       	rcall	.+1202   	; 0x1512 <__fixsfsi>
    1060:	cb 01       	movw	r24, r22
    1062:	d0 db       	rcall	.-2144   	; 0x804 <dac_conrolMotor>
	
	regulator_updateEncoder(_motorReadEncoder());
    1064:	b3 db       	rcall	.-2202   	; 0x7cc <_motorReadEncoder>
    1066:	57 df       	rcall	.-338    	; 0xf16 <regulator_updateEncoder>
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	08 95       	ret

0000107a <solenoid_init>:

static int solenoid_pushTimeRemaining = 0;

void solenoid_init() {
	//Set port as an output
	SET_BIT(DDRF, PF1);
    107a:	81 9a       	sbi	0x10, 1	; 16
		
	// set output as 0
	CLEAR_BIT(PORTF, PF1);
    107c:	89 98       	cbi	0x11, 1	; 17
    107e:	08 95       	ret

00001080 <solenoid_push>:
}

void solenoid_push() {
	SET_BIT(PORTF, PF1);
    1080:	89 9a       	sbi	0x11, 1	; 17
    1082:	08 95       	ret

00001084 <solenoid_release>:
}

void solenoid_release() {
	CLEAR_BIT(PORTF, PF1);
    1084:	89 98       	cbi	0x11, 1	; 17
    1086:	08 95       	ret

00001088 <solenoid_interrupt_handlePush>:
}


void solenoid_interrupt_handlePush() {
	solenoid_pushTimeRemaining -= 1; 
    1088:	80 91 65 05 	lds	r24, 0x0565
    108c:	90 91 66 05 	lds	r25, 0x0566
    1090:	01 97       	sbiw	r24, 0x01	; 1
	if(solenoid_pushTimeRemaining <= 0){
    1092:	18 16       	cp	r1, r24
    1094:	19 06       	cpc	r1, r25
    1096:	2c f4       	brge	.+10     	; 0x10a2 <solenoid_interrupt_handlePush+0x1a>
	CLEAR_BIT(PORTF, PF1);
}


void solenoid_interrupt_handlePush() {
	solenoid_pushTimeRemaining -= 1; 
    1098:	90 93 66 05 	sts	0x0566, r25
    109c:	80 93 65 05 	sts	0x0565, r24
    10a0:	08 95       	ret
	if(solenoid_pushTimeRemaining <= 0){
		solenoid_pushTimeRemaining = 20; 
    10a2:	84 e1       	ldi	r24, 0x14	; 20
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 66 05 	sts	0x0566, r25
    10aa:	80 93 65 05 	sts	0x0565, r24
		solenoid_release(); 
    10ae:	ea cf       	rjmp	.-44     	; 0x1084 <solenoid_release>
    10b0:	08 95       	ret

000010b2 <solenoid_generatePush>:
		//printf("Release push\n"); 
	}	
}

void solenoid_generatePush() {
	printf("Push\n"); 
    10b2:	85 e5       	ldi	r24, 0x55	; 85
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	88 d5       	rcall	.+2832   	; 0x1bc8 <puts>
	solenoid_pushTimeRemaining = 20;
    10b8:	84 e1       	ldi	r24, 0x14	; 20
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	90 93 66 05 	sts	0x0566, r25
    10c0:	80 93 65 05 	sts	0x0565, r24
	solenoid_push();
    10c4:	dd cf       	rjmp	.-70     	; 0x1080 <solenoid_push>
    10c6:	08 95       	ret

000010c8 <sound_turnOn>:
	sound_turnOn(false); 
}


void sound_turnOn(boolean turnOn){
	if(turnOn){
    10c8:	89 2b       	or	r24, r25
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <sound_turnOn+0x10>
		SET_BIT(PORTK, PK7); // PK7 activates an external module for sound
    10cc:	e8 e0       	ldi	r30, 0x08	; 8
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	80 81       	ld	r24, Z
    10d2:	80 68       	ori	r24, 0x80	; 128
    10d4:	80 83       	st	Z, r24
    10d6:	08 95       	ret
	}
	else{
		CLEAR_BIT(PORTK, PK7);
    10d8:	e8 e0       	ldi	r30, 0x08	; 8
    10da:	f1 e0       	ldi	r31, 0x01	; 1
    10dc:	80 81       	ld	r24, Z
    10de:	8f 77       	andi	r24, 0x7F	; 127
    10e0:	80 83       	st	Z, r24
    10e2:	08 95       	ret

000010e4 <sound_init>:




void sound_init(){
	SET_BIT(DDRK, PK7); // PORK K pin 7 is A15 on the shield and is used to activate an external module for sound
    10e4:	e7 e0       	ldi	r30, 0x07	; 7
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	80 81       	ld	r24, Z
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	80 83       	st	Z, r24
	sound_turnOn(false); 
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	ea cf       	rjmp	.-44     	; 0x10c8 <sound_turnOn>
    10f4:	08 95       	ret

000010f6 <spi_init>:
    10f6:	87 e8       	ldi	r24, 0x87	; 135
    10f8:	84 b9       	out	0x04, r24	; 4
    10fa:	28 98       	cbi	0x05, 0	; 5
    10fc:	81 e5       	ldi	r24, 0x51	; 81
    10fe:	8c bd       	out	0x2c, r24	; 44
    1100:	08 95       	ret

00001102 <spi_startTransmision>:
    1102:	2f 98       	cbi	0x05, 7	; 5
    1104:	08 95       	ret

00001106 <spi_endTransmision>:
    1106:	2f 9a       	sbi	0x05, 7	; 5
    1108:	08 95       	ret

0000110a <spi_transmitByte>:
    110a:	8e bd       	out	0x2e, r24	; 46
    110c:	0d b4       	in	r0, 0x2d	; 45
    110e:	07 fe       	sbrs	r0, 7
    1110:	fd cf       	rjmp	.-6      	; 0x110c <spi_transmitByte+0x2>
    1112:	08 95       	ret

00001114 <spi_readByte>:
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	f9 df       	rcall	.-14     	; 0x110a <spi_transmitByte>
    1118:	8e b5       	in	r24, 0x2e	; 46
    111a:	08 95       	ret

0000111c <timer_init>:
    111c:	e1 e2       	ldi	r30, 0x21	; 33
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	80 81       	ld	r24, Z
    1122:	81 60       	ori	r24, 0x01	; 1
    1124:	80 83       	st	Z, r24
    1126:	e3 e7       	ldi	r30, 0x73	; 115
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	80 83       	st	Z, r24
    1130:	08 95       	ret

00001132 <timer_get>:
    1132:	80 91 67 05 	lds	r24, 0x0567
    1136:	90 91 68 05 	lds	r25, 0x0568
    113a:	08 95       	ret

0000113c <timer_reset>:
    113c:	10 92 68 05 	sts	0x0568, r1
    1140:	10 92 67 05 	sts	0x0567, r1
    1144:	08 95       	ret

00001146 <__vector_50>:
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	80 91 67 05 	lds	r24, 0x0567
    1158:	90 91 68 05 	lds	r25, 0x0568
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	90 93 68 05 	sts	0x0568, r25
    1162:	80 93 67 05 	sts	0x0567, r24
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <TWI_Master_Initialise>:
    1174:	8c e0       	ldi	r24, 0x0C	; 12
    1176:	80 93 b8 00 	sts	0x00B8, r24
    117a:	8f ef       	ldi	r24, 0xFF	; 255
    117c:	80 93 bb 00 	sts	0x00BB, r24
    1180:	84 e0       	ldi	r24, 0x04	; 4
    1182:	80 93 bc 00 	sts	0x00BC, r24
    1186:	08 95       	ret

00001188 <TWI_Start_Transceiver_With_Data>:
    1188:	ec eb       	ldi	r30, 0xBC	; 188
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	20 81       	ld	r18, Z
    118e:	20 fd       	sbrc	r18, 0
    1190:	fd cf       	rjmp	.-6      	; 0x118c <TWI_Start_Transceiver_With_Data+0x4>
    1192:	60 93 6b 05 	sts	0x056B, r22
    1196:	fc 01       	movw	r30, r24
    1198:	20 81       	ld	r18, Z
    119a:	20 93 6c 05 	sts	0x056C, r18
    119e:	20 fd       	sbrc	r18, 0
    11a0:	0c c0       	rjmp	.+24     	; 0x11ba <TWI_Start_Transceiver_With_Data+0x32>
    11a2:	62 30       	cpi	r22, 0x02	; 2
    11a4:	50 f0       	brcs	.+20     	; 0x11ba <TWI_Start_Transceiver_With_Data+0x32>
    11a6:	dc 01       	movw	r26, r24
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	ed e6       	ldi	r30, 0x6D	; 109
    11ac:	f5 e0       	ldi	r31, 0x05	; 5
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	9d 91       	ld	r25, X+
    11b2:	91 93       	st	Z+, r25
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	86 13       	cpse	r24, r22
    11b8:	fb cf       	rjmp	.-10     	; 0x11b0 <TWI_Start_Transceiver_With_Data+0x28>
    11ba:	10 92 6a 05 	sts	0x056A, r1
    11be:	88 ef       	ldi	r24, 0xF8	; 248
    11c0:	80 93 0c 02 	sts	0x020C, r24
    11c4:	85 ea       	ldi	r24, 0xA5	; 165
    11c6:	80 93 bc 00 	sts	0x00BC, r24
    11ca:	08 95       	ret

000011cc <__vector_39>:
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	0b b6       	in	r0, 0x3b	; 59
    11d8:	0f 92       	push	r0
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
    11ea:	80 91 b9 00 	lds	r24, 0x00B9
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	38 97       	sbiw	r30, 0x08	; 8
    11f4:	e1 35       	cpi	r30, 0x51	; 81
    11f6:	f1 05       	cpc	r31, r1
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <__vector_39+0x30>
    11fa:	55 c0       	rjmp	.+170    	; 0x12a6 <__vector_39+0xda>
    11fc:	ee 58       	subi	r30, 0x8E	; 142
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	01 c3       	rjmp	.+1538   	; 0x1804 <__tablejump2__>
    1202:	10 92 69 05 	sts	0x0569, r1
    1206:	e0 91 69 05 	lds	r30, 0x0569
    120a:	80 91 6b 05 	lds	r24, 0x056B
    120e:	e8 17       	cp	r30, r24
    1210:	70 f4       	brcc	.+28     	; 0x122e <__vector_39+0x62>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	8e 0f       	add	r24, r30
    1216:	80 93 69 05 	sts	0x0569, r24
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	e4 59       	subi	r30, 0x94	; 148
    121e:	fa 4f       	sbci	r31, 0xFA	; 250
    1220:	80 81       	ld	r24, Z
    1222:	80 93 bb 00 	sts	0x00BB, r24
    1226:	85 e8       	ldi	r24, 0x85	; 133
    1228:	80 93 bc 00 	sts	0x00BC, r24
    122c:	43 c0       	rjmp	.+134    	; 0x12b4 <__vector_39+0xe8>
    122e:	80 91 6a 05 	lds	r24, 0x056A
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	80 93 6a 05 	sts	0x056A, r24
    1238:	84 e9       	ldi	r24, 0x94	; 148
    123a:	80 93 bc 00 	sts	0x00BC, r24
    123e:	3a c0       	rjmp	.+116    	; 0x12b4 <__vector_39+0xe8>
    1240:	e0 91 69 05 	lds	r30, 0x0569
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	8e 0f       	add	r24, r30
    1248:	80 93 69 05 	sts	0x0569, r24
    124c:	80 91 bb 00 	lds	r24, 0x00BB
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	e4 59       	subi	r30, 0x94	; 148
    1254:	fa 4f       	sbci	r31, 0xFA	; 250
    1256:	80 83       	st	Z, r24
    1258:	20 91 69 05 	lds	r18, 0x0569
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	80 91 6b 05 	lds	r24, 0x056B
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	28 17       	cp	r18, r24
    1268:	39 07       	cpc	r19, r25
    126a:	24 f4       	brge	.+8      	; 0x1274 <__vector_39+0xa8>
    126c:	85 ec       	ldi	r24, 0xC5	; 197
    126e:	80 93 bc 00 	sts	0x00BC, r24
    1272:	20 c0       	rjmp	.+64     	; 0x12b4 <__vector_39+0xe8>
    1274:	85 e8       	ldi	r24, 0x85	; 133
    1276:	80 93 bc 00 	sts	0x00BC, r24
    127a:	1c c0       	rjmp	.+56     	; 0x12b4 <__vector_39+0xe8>
    127c:	80 91 bb 00 	lds	r24, 0x00BB
    1280:	e0 91 69 05 	lds	r30, 0x0569
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	e4 59       	subi	r30, 0x94	; 148
    1288:	fa 4f       	sbci	r31, 0xFA	; 250
    128a:	80 83       	st	Z, r24
    128c:	80 91 6a 05 	lds	r24, 0x056A
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	80 93 6a 05 	sts	0x056A, r24
    1296:	84 e9       	ldi	r24, 0x94	; 148
    1298:	80 93 bc 00 	sts	0x00BC, r24
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <__vector_39+0xe8>
    129e:	85 ea       	ldi	r24, 0xA5	; 165
    12a0:	80 93 bc 00 	sts	0x00BC, r24
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <__vector_39+0xe8>
    12a6:	80 91 b9 00 	lds	r24, 0x00B9
    12aa:	80 93 0c 02 	sts	0x020C, r24
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	80 93 bc 00 	sts	0x00BC, r24
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0b be       	out	0x3b, r0	; 59
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <usart_getchar>:
} // USART_Init


int usart_getchar() {
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    12d2:	e0 ec       	ldi	r30, 0xC0	; 192
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 23       	and	r24, r24
    12da:	ec f7       	brge	.-6      	; 0x12d6 <usart_getchar+0x4>
	/* Get and return received data from buffer */
	return UDR0;
    12dc:	80 91 c6 00 	lds	r24, 0x00C6
}
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <usart_putchar>:

int usart_putchar(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0)));
    12e4:	e0 ec       	ldi	r30, 0xC0	; 192
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	90 81       	ld	r25, Z
    12ea:	95 ff       	sbrs	r25, 5
    12ec:	fd cf       	rjmp	.-6      	; 0x12e8 <usart_putchar+0x4>
	// put data into buffer, sends the data
	UDR0 = data;
    12ee:	80 93 c6 00 	sts	0x00C6, r24
	return data;
}
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	08 95       	ret

000012f6 <usart_init>:
#include <avr/io.h>
#include "usart.h"

void usart_init( unsigned int ubrr){
	/* Set baud rate */
	UBRR0 = (unsigned char)(ubrr>>8);
    12f6:	29 2f       	mov	r18, r25
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	e4 ec       	ldi	r30, 0xC4	; 196
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	31 83       	std	Z+1, r19	; 0x01
    1300:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
    1302:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1304:	88 e1       	ldi	r24, 0x18	; 24
    1306:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    130a:	8e e0       	ldi	r24, 0x0E	; 14
    130c:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(usart_putchar, usart_getchar);
    1310:	69 e6       	ldi	r22, 0x69	; 105
    1312:	79 e0       	ldi	r23, 0x09	; 9
    1314:	82 e7       	ldi	r24, 0x72	; 114
    1316:	99 e0       	ldi	r25, 0x09	; 9
    1318:	f7 c3       	rjmp	.+2030   	; 0x1b08 <fdevopen>
    131a:	08 95       	ret

0000131c <printf_char>:
	// put data into buffer, sends the data
	UDR0 = data;
	return data;
}

void printf_char(char* string) {
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
	for (int i = 0; string[i] != '\0'; ++i) {
    1322:	88 81       	ld	r24, Y
    1324:	88 23       	and	r24, r24
    1326:	29 f0       	breq	.+10     	; 0x1332 <printf_char+0x16>
    1328:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(string[i]);
    132a:	dc df       	rcall	.-72     	; 0x12e4 <usart_putchar>
	UDR0 = data;
	return data;
}

void printf_char(char* string) {
	for (int i = 0; string[i] != '\0'; ++i) {
    132c:	89 91       	ld	r24, Y+
    132e:	81 11       	cpse	r24, r1
    1330:	fc cf       	rjmp	.-8      	; 0x132a <printf_char+0xe>
		usart_putchar(string[i]);
	}
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <printf_int>:

void printf_int(int input) {
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
	if (input<0){
    133e:	99 23       	and	r25, r25
    1340:	2c f4       	brge	.+10     	; 0x134c <printf_int+0x14>
		input *=-1;
    1342:	d1 95       	neg	r29
    1344:	c1 95       	neg	r28
    1346:	d1 09       	sbc	r29, r1
		usart_putchar('-');
    1348:	8d e2       	ldi	r24, 0x2D	; 45
    134a:	cc df       	rcall	.-104    	; 0x12e4 <usart_putchar>
	}
	if(input/10 > 0)
    134c:	ca 30       	cpi	r28, 0x0A	; 10
    134e:	d1 05       	cpc	r29, r1
    1350:	34 f0       	brlt	.+12     	; 0x135e <printf_int+0x26>
	printf_int(input/10);
    1352:	ce 01       	movw	r24, r28
    1354:	6a e0       	ldi	r22, 0x0A	; 10
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	26 d2       	rcall	.+1100   	; 0x17a6 <__divmodhi4>
    135a:	cb 01       	movw	r24, r22
    135c:	ed df       	rcall	.-38     	; 0x1338 <printf_int>
	usart_putchar((unsigned char) (input%10) + '0');
    135e:	ce 01       	movw	r24, r28
    1360:	6a e0       	ldi	r22, 0x0A	; 10
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	20 d2       	rcall	.+1088   	; 0x17a6 <__divmodhi4>
    1366:	80 5d       	subi	r24, 0xD0	; 208
    1368:	bd df       	rcall	.-134    	; 0x12e4 <usart_putchar>
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <__subsf3>:
    1370:	50 58       	subi	r21, 0x80	; 128

00001372 <__addsf3>:
    1372:	bb 27       	eor	r27, r27
    1374:	aa 27       	eor	r26, r26
    1376:	0e d0       	rcall	.+28     	; 0x1394 <__addsf3x>
    1378:	75 c1       	rjmp	.+746    	; 0x1664 <__fp_round>
    137a:	66 d1       	rcall	.+716    	; 0x1648 <__fp_pscA>
    137c:	30 f0       	brcs	.+12     	; 0x138a <__addsf3+0x18>
    137e:	6b d1       	rcall	.+726    	; 0x1656 <__fp_pscB>
    1380:	20 f0       	brcs	.+8      	; 0x138a <__addsf3+0x18>
    1382:	31 f4       	brne	.+12     	; 0x1390 <__addsf3+0x1e>
    1384:	9f 3f       	cpi	r25, 0xFF	; 255
    1386:	11 f4       	brne	.+4      	; 0x138c <__addsf3+0x1a>
    1388:	1e f4       	brtc	.+6      	; 0x1390 <__addsf3+0x1e>
    138a:	5b c1       	rjmp	.+694    	; 0x1642 <__fp_nan>
    138c:	0e f4       	brtc	.+2      	; 0x1390 <__addsf3+0x1e>
    138e:	e0 95       	com	r30
    1390:	e7 fb       	bst	r30, 7
    1392:	51 c1       	rjmp	.+674    	; 0x1636 <__fp_inf>

00001394 <__addsf3x>:
    1394:	e9 2f       	mov	r30, r25
    1396:	77 d1       	rcall	.+750    	; 0x1686 <__fp_split3>
    1398:	80 f3       	brcs	.-32     	; 0x137a <__addsf3+0x8>
    139a:	ba 17       	cp	r27, r26
    139c:	62 07       	cpc	r22, r18
    139e:	73 07       	cpc	r23, r19
    13a0:	84 07       	cpc	r24, r20
    13a2:	95 07       	cpc	r25, r21
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <__addsf3x+0x18>
    13a6:	71 f4       	brne	.+28     	; 0x13c4 <__addsf3x+0x30>
    13a8:	9e f5       	brtc	.+102    	; 0x1410 <__addsf3x+0x7c>
    13aa:	8f c1       	rjmp	.+798    	; 0x16ca <__fp_zero>
    13ac:	0e f4       	brtc	.+2      	; 0x13b0 <__addsf3x+0x1c>
    13ae:	e0 95       	com	r30
    13b0:	0b 2e       	mov	r0, r27
    13b2:	ba 2f       	mov	r27, r26
    13b4:	a0 2d       	mov	r26, r0
    13b6:	0b 01       	movw	r0, r22
    13b8:	b9 01       	movw	r22, r18
    13ba:	90 01       	movw	r18, r0
    13bc:	0c 01       	movw	r0, r24
    13be:	ca 01       	movw	r24, r20
    13c0:	a0 01       	movw	r20, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	ff 27       	eor	r31, r31
    13c6:	59 1b       	sub	r21, r25
    13c8:	99 f0       	breq	.+38     	; 0x13f0 <__addsf3x+0x5c>
    13ca:	59 3f       	cpi	r21, 0xF9	; 249
    13cc:	50 f4       	brcc	.+20     	; 0x13e2 <__addsf3x+0x4e>
    13ce:	50 3e       	cpi	r21, 0xE0	; 224
    13d0:	68 f1       	brcs	.+90     	; 0x142c <__addsf3x+0x98>
    13d2:	1a 16       	cp	r1, r26
    13d4:	f0 40       	sbci	r31, 0x00	; 0
    13d6:	a2 2f       	mov	r26, r18
    13d8:	23 2f       	mov	r18, r19
    13da:	34 2f       	mov	r19, r20
    13dc:	44 27       	eor	r20, r20
    13de:	58 5f       	subi	r21, 0xF8	; 248
    13e0:	f3 cf       	rjmp	.-26     	; 0x13c8 <__addsf3x+0x34>
    13e2:	46 95       	lsr	r20
    13e4:	37 95       	ror	r19
    13e6:	27 95       	ror	r18
    13e8:	a7 95       	ror	r26
    13ea:	f0 40       	sbci	r31, 0x00	; 0
    13ec:	53 95       	inc	r21
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__addsf3x+0x4e>
    13f0:	7e f4       	brtc	.+30     	; 0x1410 <__addsf3x+0x7c>
    13f2:	1f 16       	cp	r1, r31
    13f4:	ba 0b       	sbc	r27, r26
    13f6:	62 0b       	sbc	r22, r18
    13f8:	73 0b       	sbc	r23, r19
    13fa:	84 0b       	sbc	r24, r20
    13fc:	ba f0       	brmi	.+46     	; 0x142c <__addsf3x+0x98>
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	a1 f0       	breq	.+40     	; 0x142a <__addsf3x+0x96>
    1402:	ff 0f       	add	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	c2 f7       	brpl	.-16     	; 0x13fe <__addsf3x+0x6a>
    140e:	0e c0       	rjmp	.+28     	; 0x142c <__addsf3x+0x98>
    1410:	ba 0f       	add	r27, r26
    1412:	62 1f       	adc	r22, r18
    1414:	73 1f       	adc	r23, r19
    1416:	84 1f       	adc	r24, r20
    1418:	48 f4       	brcc	.+18     	; 0x142c <__addsf3x+0x98>
    141a:	87 95       	ror	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f7 95       	ror	r31
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	08 f0       	brcs	.+2      	; 0x142a <__addsf3x+0x96>
    1428:	b3 cf       	rjmp	.-154    	; 0x1390 <__addsf3+0x1e>
    142a:	93 95       	inc	r25
    142c:	88 0f       	add	r24, r24
    142e:	08 f0       	brcs	.+2      	; 0x1432 <__addsf3x+0x9e>
    1430:	99 27       	eor	r25, r25
    1432:	ee 0f       	add	r30, r30
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	08 95       	ret

0000143a <__cmpsf2>:
    143a:	d9 d0       	rcall	.+434    	; 0x15ee <__fp_cmp>
    143c:	08 f4       	brcc	.+2      	; 0x1440 <__cmpsf2+0x6>
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret

00001442 <__divsf3>:
    1442:	0c d0       	rcall	.+24     	; 0x145c <__divsf3x>
    1444:	0f c1       	rjmp	.+542    	; 0x1664 <__fp_round>
    1446:	07 d1       	rcall	.+526    	; 0x1656 <__fp_pscB>
    1448:	40 f0       	brcs	.+16     	; 0x145a <__divsf3+0x18>
    144a:	fe d0       	rcall	.+508    	; 0x1648 <__fp_pscA>
    144c:	30 f0       	brcs	.+12     	; 0x145a <__divsf3+0x18>
    144e:	21 f4       	brne	.+8      	; 0x1458 <__divsf3+0x16>
    1450:	5f 3f       	cpi	r21, 0xFF	; 255
    1452:	19 f0       	breq	.+6      	; 0x145a <__divsf3+0x18>
    1454:	f0 c0       	rjmp	.+480    	; 0x1636 <__fp_inf>
    1456:	51 11       	cpse	r21, r1
    1458:	39 c1       	rjmp	.+626    	; 0x16cc <__fp_szero>
    145a:	f3 c0       	rjmp	.+486    	; 0x1642 <__fp_nan>

0000145c <__divsf3x>:
    145c:	14 d1       	rcall	.+552    	; 0x1686 <__fp_split3>
    145e:	98 f3       	brcs	.-26     	; 0x1446 <__divsf3+0x4>

00001460 <__divsf3_pse>:
    1460:	99 23       	and	r25, r25
    1462:	c9 f3       	breq	.-14     	; 0x1456 <__divsf3+0x14>
    1464:	55 23       	and	r21, r21
    1466:	b1 f3       	breq	.-20     	; 0x1454 <__divsf3+0x12>
    1468:	95 1b       	sub	r25, r21
    146a:	55 0b       	sbc	r21, r21
    146c:	bb 27       	eor	r27, r27
    146e:	aa 27       	eor	r26, r26
    1470:	62 17       	cp	r22, r18
    1472:	73 07       	cpc	r23, r19
    1474:	84 07       	cpc	r24, r20
    1476:	38 f0       	brcs	.+14     	; 0x1486 <__divsf3_pse+0x26>
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	44 1f       	adc	r20, r20
    1482:	aa 1f       	adc	r26, r26
    1484:	a9 f3       	breq	.-22     	; 0x1470 <__divsf3_pse+0x10>
    1486:	33 d0       	rcall	.+102    	; 0x14ee <__divsf3_pse+0x8e>
    1488:	0e 2e       	mov	r0, r30
    148a:	3a f0       	brmi	.+14     	; 0x149a <__divsf3_pse+0x3a>
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	30 d0       	rcall	.+96     	; 0x14f0 <__divsf3_pse+0x90>
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	e6 95       	lsr	r30
    1496:	00 1c       	adc	r0, r0
    1498:	ca f7       	brpl	.-14     	; 0x148c <__divsf3_pse+0x2c>
    149a:	29 d0       	rcall	.+82     	; 0x14ee <__divsf3_pse+0x8e>
    149c:	fe 2f       	mov	r31, r30
    149e:	27 d0       	rcall	.+78     	; 0x14ee <__divsf3_pse+0x8e>
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	bb 1f       	adc	r27, r27
    14a8:	26 17       	cp	r18, r22
    14aa:	37 07       	cpc	r19, r23
    14ac:	48 07       	cpc	r20, r24
    14ae:	ab 07       	cpc	r26, r27
    14b0:	b0 e8       	ldi	r27, 0x80	; 128
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <__divsf3_pse+0x56>
    14b4:	bb 0b       	sbc	r27, r27
    14b6:	80 2d       	mov	r24, r0
    14b8:	bf 01       	movw	r22, r30
    14ba:	ff 27       	eor	r31, r31
    14bc:	93 58       	subi	r25, 0x83	; 131
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	2a f0       	brmi	.+10     	; 0x14cc <__divsf3_pse+0x6c>
    14c2:	9e 3f       	cpi	r25, 0xFE	; 254
    14c4:	51 05       	cpc	r21, r1
    14c6:	68 f0       	brcs	.+26     	; 0x14e2 <__divsf3_pse+0x82>
    14c8:	b6 c0       	rjmp	.+364    	; 0x1636 <__fp_inf>
    14ca:	00 c1       	rjmp	.+512    	; 0x16cc <__fp_szero>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	ec f3       	brlt	.-6      	; 0x14ca <__divsf3_pse+0x6a>
    14d0:	98 3e       	cpi	r25, 0xE8	; 232
    14d2:	dc f3       	brlt	.-10     	; 0x14ca <__divsf3_pse+0x6a>
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f7 95       	ror	r31
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__divsf3_pse+0x74>
    14e2:	88 0f       	add	r24, r24
    14e4:	91 1d       	adc	r25, r1
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret
    14ee:	e1 e0       	ldi	r30, 0x01	; 1
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	bb 1f       	adc	r27, r27
    14f8:	62 17       	cp	r22, r18
    14fa:	73 07       	cpc	r23, r19
    14fc:	84 07       	cpc	r24, r20
    14fe:	ba 07       	cpc	r27, r26
    1500:	20 f0       	brcs	.+8      	; 0x150a <__divsf3_pse+0xaa>
    1502:	62 1b       	sub	r22, r18
    1504:	73 0b       	sbc	r23, r19
    1506:	84 0b       	sbc	r24, r20
    1508:	ba 0b       	sbc	r27, r26
    150a:	ee 1f       	adc	r30, r30
    150c:	88 f7       	brcc	.-30     	; 0x14f0 <__divsf3_pse+0x90>
    150e:	e0 95       	com	r30
    1510:	08 95       	ret

00001512 <__fixsfsi>:
    1512:	04 d0       	rcall	.+8      	; 0x151c <__fixunssfsi>
    1514:	68 94       	set
    1516:	b1 11       	cpse	r27, r1
    1518:	d9 c0       	rjmp	.+434    	; 0x16cc <__fp_szero>
    151a:	08 95       	ret

0000151c <__fixunssfsi>:
    151c:	bc d0       	rcall	.+376    	; 0x1696 <__fp_splitA>
    151e:	88 f0       	brcs	.+34     	; 0x1542 <__fixunssfsi+0x26>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	90 f0       	brcs	.+36     	; 0x1548 <__fixunssfsi+0x2c>
    1524:	b9 2f       	mov	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b7 51       	subi	r27, 0x17	; 23
    152a:	a0 f0       	brcs	.+40     	; 0x1554 <__fixunssfsi+0x38>
    152c:	d1 f0       	breq	.+52     	; 0x1562 <__fixunssfsi+0x46>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a f0       	brmi	.+6      	; 0x153e <__fixunssfsi+0x22>
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__fixunssfsi+0x12>
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <__fixunssfsi+0x46>
    153e:	b1 30       	cpi	r27, 0x01	; 1
    1540:	81 f0       	breq	.+32     	; 0x1562 <__fixunssfsi+0x46>
    1542:	c3 d0       	rcall	.+390    	; 0x16ca <__fp_zero>
    1544:	b1 e0       	ldi	r27, 0x01	; 1
    1546:	08 95       	ret
    1548:	c0 c0       	rjmp	.+384    	; 0x16ca <__fp_zero>
    154a:	67 2f       	mov	r22, r23
    154c:	78 2f       	mov	r23, r24
    154e:	88 27       	eor	r24, r24
    1550:	b8 5f       	subi	r27, 0xF8	; 248
    1552:	39 f0       	breq	.+14     	; 0x1562 <__fixunssfsi+0x46>
    1554:	b9 3f       	cpi	r27, 0xF9	; 249
    1556:	cc f3       	brlt	.-14     	; 0x154a <__fixunssfsi+0x2e>
    1558:	86 95       	lsr	r24
    155a:	77 95       	ror	r23
    155c:	67 95       	ror	r22
    155e:	b3 95       	inc	r27
    1560:	d9 f7       	brne	.-10     	; 0x1558 <__fixunssfsi+0x3c>
    1562:	3e f4       	brtc	.+14     	; 0x1572 <__fixunssfsi+0x56>
    1564:	90 95       	com	r25
    1566:	80 95       	com	r24
    1568:	70 95       	com	r23
    156a:	61 95       	neg	r22
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	8f 4f       	sbci	r24, 0xFF	; 255
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	08 95       	ret

00001574 <__floatunsisf>:
    1574:	e8 94       	clt
    1576:	09 c0       	rjmp	.+18     	; 0x158a <__floatsisf+0x12>

00001578 <__floatsisf>:
    1578:	97 fb       	bst	r25, 7
    157a:	3e f4       	brtc	.+14     	; 0x158a <__floatsisf+0x12>
    157c:	90 95       	com	r25
    157e:	80 95       	com	r24
    1580:	70 95       	com	r23
    1582:	61 95       	neg	r22
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	8f 4f       	sbci	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	99 23       	and	r25, r25
    158c:	a9 f0       	breq	.+42     	; 0x15b8 <__floatsisf+0x40>
    158e:	f9 2f       	mov	r31, r25
    1590:	96 e9       	ldi	r25, 0x96	; 150
    1592:	bb 27       	eor	r27, r27
    1594:	93 95       	inc	r25
    1596:	f6 95       	lsr	r31
    1598:	87 95       	ror	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b7 95       	ror	r27
    15a0:	f1 11       	cpse	r31, r1
    15a2:	f8 cf       	rjmp	.-16     	; 0x1594 <__floatsisf+0x1c>
    15a4:	fa f4       	brpl	.+62     	; 0x15e4 <__floatsisf+0x6c>
    15a6:	bb 0f       	add	r27, r27
    15a8:	11 f4       	brne	.+4      	; 0x15ae <__floatsisf+0x36>
    15aa:	60 ff       	sbrs	r22, 0
    15ac:	1b c0       	rjmp	.+54     	; 0x15e4 <__floatsisf+0x6c>
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	8f 4f       	sbci	r24, 0xFF	; 255
    15b4:	9f 4f       	sbci	r25, 0xFF	; 255
    15b6:	16 c0       	rjmp	.+44     	; 0x15e4 <__floatsisf+0x6c>
    15b8:	88 23       	and	r24, r24
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <__floatsisf+0x48>
    15bc:	96 e9       	ldi	r25, 0x96	; 150
    15be:	11 c0       	rjmp	.+34     	; 0x15e2 <__floatsisf+0x6a>
    15c0:	77 23       	and	r23, r23
    15c2:	21 f0       	breq	.+8      	; 0x15cc <__floatsisf+0x54>
    15c4:	9e e8       	ldi	r25, 0x8E	; 142
    15c6:	87 2f       	mov	r24, r23
    15c8:	76 2f       	mov	r23, r22
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <__floatsisf+0x5e>
    15cc:	66 23       	and	r22, r22
    15ce:	71 f0       	breq	.+28     	; 0x15ec <__floatsisf+0x74>
    15d0:	96 e8       	ldi	r25, 0x86	; 134
    15d2:	86 2f       	mov	r24, r22
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	2a f0       	brmi	.+10     	; 0x15e4 <__floatsisf+0x6c>
    15da:	9a 95       	dec	r25
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	da f7       	brpl	.-10     	; 0x15da <__floatsisf+0x62>
    15e4:	88 0f       	add	r24, r24
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	97 f9       	bld	r25, 7
    15ec:	08 95       	ret

000015ee <__fp_cmp>:
    15ee:	99 0f       	add	r25, r25
    15f0:	00 08       	sbc	r0, r0
    15f2:	55 0f       	add	r21, r21
    15f4:	aa 0b       	sbc	r26, r26
    15f6:	e0 e8       	ldi	r30, 0x80	; 128
    15f8:	fe ef       	ldi	r31, 0xFE	; 254
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	e8 07       	cpc	r30, r24
    1600:	f9 07       	cpc	r31, r25
    1602:	c0 f0       	brcs	.+48     	; 0x1634 <__fp_cmp+0x46>
    1604:	12 16       	cp	r1, r18
    1606:	13 06       	cpc	r1, r19
    1608:	e4 07       	cpc	r30, r20
    160a:	f5 07       	cpc	r31, r21
    160c:	98 f0       	brcs	.+38     	; 0x1634 <__fp_cmp+0x46>
    160e:	62 1b       	sub	r22, r18
    1610:	73 0b       	sbc	r23, r19
    1612:	84 0b       	sbc	r24, r20
    1614:	95 0b       	sbc	r25, r21
    1616:	39 f4       	brne	.+14     	; 0x1626 <__fp_cmp+0x38>
    1618:	0a 26       	eor	r0, r26
    161a:	61 f0       	breq	.+24     	; 0x1634 <__fp_cmp+0x46>
    161c:	23 2b       	or	r18, r19
    161e:	24 2b       	or	r18, r20
    1620:	25 2b       	or	r18, r21
    1622:	21 f4       	brne	.+8      	; 0x162c <__fp_cmp+0x3e>
    1624:	08 95       	ret
    1626:	0a 26       	eor	r0, r26
    1628:	09 f4       	brne	.+2      	; 0x162c <__fp_cmp+0x3e>
    162a:	a1 40       	sbci	r26, 0x01	; 1
    162c:	a6 95       	lsr	r26
    162e:	8f ef       	ldi	r24, 0xFF	; 255
    1630:	81 1d       	adc	r24, r1
    1632:	81 1d       	adc	r24, r1
    1634:	08 95       	ret

00001636 <__fp_inf>:
    1636:	97 f9       	bld	r25, 7
    1638:	9f 67       	ori	r25, 0x7F	; 127
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	08 95       	ret

00001642 <__fp_nan>:
    1642:	9f ef       	ldi	r25, 0xFF	; 255
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	08 95       	ret

00001648 <__fp_pscA>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	16 16       	cp	r1, r22
    164e:	17 06       	cpc	r1, r23
    1650:	18 06       	cpc	r1, r24
    1652:	09 06       	cpc	r0, r25
    1654:	08 95       	ret

00001656 <__fp_pscB>:
    1656:	00 24       	eor	r0, r0
    1658:	0a 94       	dec	r0
    165a:	12 16       	cp	r1, r18
    165c:	13 06       	cpc	r1, r19
    165e:	14 06       	cpc	r1, r20
    1660:	05 06       	cpc	r0, r21
    1662:	08 95       	ret

00001664 <__fp_round>:
    1664:	09 2e       	mov	r0, r25
    1666:	03 94       	inc	r0
    1668:	00 0c       	add	r0, r0
    166a:	11 f4       	brne	.+4      	; 0x1670 <__fp_round+0xc>
    166c:	88 23       	and	r24, r24
    166e:	52 f0       	brmi	.+20     	; 0x1684 <__fp_round+0x20>
    1670:	bb 0f       	add	r27, r27
    1672:	40 f4       	brcc	.+16     	; 0x1684 <__fp_round+0x20>
    1674:	bf 2b       	or	r27, r31
    1676:	11 f4       	brne	.+4      	; 0x167c <__fp_round+0x18>
    1678:	60 ff       	sbrs	r22, 0
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <__fp_round+0x20>
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__fp_split3>:
    1686:	57 fd       	sbrc	r21, 7
    1688:	90 58       	subi	r25, 0x80	; 128
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	59 f0       	breq	.+22     	; 0x16a6 <__fp_splitA+0x10>
    1690:	5f 3f       	cpi	r21, 0xFF	; 255
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__fp_splitA+0x1a>
    1694:	47 95       	ror	r20

00001696 <__fp_splitA>:
    1696:	88 0f       	add	r24, r24
    1698:	97 fb       	bst	r25, 7
    169a:	99 1f       	adc	r25, r25
    169c:	61 f0       	breq	.+24     	; 0x16b6 <__fp_splitA+0x20>
    169e:	9f 3f       	cpi	r25, 0xFF	; 255
    16a0:	79 f0       	breq	.+30     	; 0x16c0 <__fp_splitA+0x2a>
    16a2:	87 95       	ror	r24
    16a4:	08 95       	ret
    16a6:	12 16       	cp	r1, r18
    16a8:	13 06       	cpc	r1, r19
    16aa:	14 06       	cpc	r1, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <__fp_split3+0xe>
    16b0:	46 95       	lsr	r20
    16b2:	f1 df       	rcall	.-30     	; 0x1696 <__fp_splitA>
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <__fp_splitA+0x30>
    16b6:	16 16       	cp	r1, r22
    16b8:	17 06       	cpc	r1, r23
    16ba:	18 06       	cpc	r1, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	f1 cf       	rjmp	.-30     	; 0x16a2 <__fp_splitA+0xc>
    16c0:	86 95       	lsr	r24
    16c2:	71 05       	cpc	r23, r1
    16c4:	61 05       	cpc	r22, r1
    16c6:	08 94       	sec
    16c8:	08 95       	ret

000016ca <__fp_zero>:
    16ca:	e8 94       	clt

000016cc <__fp_szero>:
    16cc:	bb 27       	eor	r27, r27
    16ce:	66 27       	eor	r22, r22
    16d0:	77 27       	eor	r23, r23
    16d2:	cb 01       	movw	r24, r22
    16d4:	97 f9       	bld	r25, 7
    16d6:	08 95       	ret

000016d8 <__gesf2>:
    16d8:	8a df       	rcall	.-236    	; 0x15ee <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__gesf2+0x6>
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__mulsf3>:
    16e0:	0b d0       	rcall	.+22     	; 0x16f8 <__mulsf3x>
    16e2:	c0 cf       	rjmp	.-128    	; 0x1664 <__fp_round>
    16e4:	b1 df       	rcall	.-158    	; 0x1648 <__fp_pscA>
    16e6:	28 f0       	brcs	.+10     	; 0x16f2 <__mulsf3+0x12>
    16e8:	b6 df       	rcall	.-148    	; 0x1656 <__fp_pscB>
    16ea:	18 f0       	brcs	.+6      	; 0x16f2 <__mulsf3+0x12>
    16ec:	95 23       	and	r25, r21
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <__mulsf3+0x12>
    16f0:	a2 cf       	rjmp	.-188    	; 0x1636 <__fp_inf>
    16f2:	a7 cf       	rjmp	.-178    	; 0x1642 <__fp_nan>
    16f4:	11 24       	eor	r1, r1
    16f6:	ea cf       	rjmp	.-44     	; 0x16cc <__fp_szero>

000016f8 <__mulsf3x>:
    16f8:	c6 df       	rcall	.-116    	; 0x1686 <__fp_split3>
    16fa:	a0 f3       	brcs	.-24     	; 0x16e4 <__mulsf3+0x4>

000016fc <__mulsf3_pse>:
    16fc:	95 9f       	mul	r25, r21
    16fe:	d1 f3       	breq	.-12     	; 0x16f4 <__mulsf3+0x14>
    1700:	95 0f       	add	r25, r21
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	55 1f       	adc	r21, r21
    1706:	62 9f       	mul	r22, r18
    1708:	f0 01       	movw	r30, r0
    170a:	72 9f       	mul	r23, r18
    170c:	bb 27       	eor	r27, r27
    170e:	f0 0d       	add	r31, r0
    1710:	b1 1d       	adc	r27, r1
    1712:	63 9f       	mul	r22, r19
    1714:	aa 27       	eor	r26, r26
    1716:	f0 0d       	add	r31, r0
    1718:	b1 1d       	adc	r27, r1
    171a:	aa 1f       	adc	r26, r26
    171c:	64 9f       	mul	r22, r20
    171e:	66 27       	eor	r22, r22
    1720:	b0 0d       	add	r27, r0
    1722:	a1 1d       	adc	r26, r1
    1724:	66 1f       	adc	r22, r22
    1726:	82 9f       	mul	r24, r18
    1728:	22 27       	eor	r18, r18
    172a:	b0 0d       	add	r27, r0
    172c:	a1 1d       	adc	r26, r1
    172e:	62 1f       	adc	r22, r18
    1730:	73 9f       	mul	r23, r19
    1732:	b0 0d       	add	r27, r0
    1734:	a1 1d       	adc	r26, r1
    1736:	62 1f       	adc	r22, r18
    1738:	83 9f       	mul	r24, r19
    173a:	a0 0d       	add	r26, r0
    173c:	61 1d       	adc	r22, r1
    173e:	22 1f       	adc	r18, r18
    1740:	74 9f       	mul	r23, r20
    1742:	33 27       	eor	r19, r19
    1744:	a0 0d       	add	r26, r0
    1746:	61 1d       	adc	r22, r1
    1748:	23 1f       	adc	r18, r19
    174a:	84 9f       	mul	r24, r20
    174c:	60 0d       	add	r22, r0
    174e:	21 1d       	adc	r18, r1
    1750:	82 2f       	mov	r24, r18
    1752:	76 2f       	mov	r23, r22
    1754:	6a 2f       	mov	r22, r26
    1756:	11 24       	eor	r1, r1
    1758:	9f 57       	subi	r25, 0x7F	; 127
    175a:	50 40       	sbci	r21, 0x00	; 0
    175c:	8a f0       	brmi	.+34     	; 0x1780 <__mulsf3_pse+0x84>
    175e:	e1 f0       	breq	.+56     	; 0x1798 <__mulsf3_pse+0x9c>
    1760:	88 23       	and	r24, r24
    1762:	4a f0       	brmi	.+18     	; 0x1776 <__mulsf3_pse+0x7a>
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	bb 1f       	adc	r27, r27
    176a:	66 1f       	adc	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	88 1f       	adc	r24, r24
    1770:	91 50       	subi	r25, 0x01	; 1
    1772:	50 40       	sbci	r21, 0x00	; 0
    1774:	a9 f7       	brne	.-22     	; 0x1760 <__mulsf3_pse+0x64>
    1776:	9e 3f       	cpi	r25, 0xFE	; 254
    1778:	51 05       	cpc	r21, r1
    177a:	70 f0       	brcs	.+28     	; 0x1798 <__mulsf3_pse+0x9c>
    177c:	5c cf       	rjmp	.-328    	; 0x1636 <__fp_inf>
    177e:	a6 cf       	rjmp	.-180    	; 0x16cc <__fp_szero>
    1780:	5f 3f       	cpi	r21, 0xFF	; 255
    1782:	ec f3       	brlt	.-6      	; 0x177e <__mulsf3_pse+0x82>
    1784:	98 3e       	cpi	r25, 0xE8	; 232
    1786:	dc f3       	brlt	.-10     	; 0x177e <__mulsf3_pse+0x82>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b7 95       	ror	r27
    1790:	f7 95       	ror	r31
    1792:	e7 95       	ror	r30
    1794:	9f 5f       	subi	r25, 0xFF	; 255
    1796:	c1 f7       	brne	.-16     	; 0x1788 <__mulsf3_pse+0x8c>
    1798:	fe 2b       	or	r31, r30
    179a:	88 0f       	add	r24, r24
    179c:	91 1d       	adc	r25, r1
    179e:	96 95       	lsr	r25
    17a0:	87 95       	ror	r24
    17a2:	97 f9       	bld	r25, 7
    17a4:	08 95       	ret

000017a6 <__divmodhi4>:
    17a6:	97 fb       	bst	r25, 7
    17a8:	07 2e       	mov	r0, r23
    17aa:	16 f4       	brtc	.+4      	; 0x17b0 <__divmodhi4+0xa>
    17ac:	00 94       	com	r0
    17ae:	06 d0       	rcall	.+12     	; 0x17bc <__divmodhi4_neg1>
    17b0:	77 fd       	sbrc	r23, 7
    17b2:	08 d0       	rcall	.+16     	; 0x17c4 <__divmodhi4_neg2>
    17b4:	33 d0       	rcall	.+102    	; 0x181c <__udivmodhi4>
    17b6:	07 fc       	sbrc	r0, 7
    17b8:	05 d0       	rcall	.+10     	; 0x17c4 <__divmodhi4_neg2>
    17ba:	3e f4       	brtc	.+14     	; 0x17ca <__divmodhi4_exit>

000017bc <__divmodhi4_neg1>:
    17bc:	90 95       	com	r25
    17be:	81 95       	neg	r24
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	08 95       	ret

000017c4 <__divmodhi4_neg2>:
    17c4:	70 95       	com	r23
    17c6:	61 95       	neg	r22
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255

000017ca <__divmodhi4_exit>:
    17ca:	08 95       	ret

000017cc <__divmodsi4>:
    17cc:	05 2e       	mov	r0, r21
    17ce:	97 fb       	bst	r25, 7
    17d0:	16 f4       	brtc	.+4      	; 0x17d6 <__divmodsi4+0xa>
    17d2:	00 94       	com	r0
    17d4:	0f d0       	rcall	.+30     	; 0x17f4 <__negsi2>
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	05 d0       	rcall	.+10     	; 0x17e4 <__divmodsi4_neg2>
    17da:	34 d0       	rcall	.+104    	; 0x1844 <__udivmodsi4>
    17dc:	07 fc       	sbrc	r0, 7
    17de:	02 d0       	rcall	.+4      	; 0x17e4 <__divmodsi4_neg2>
    17e0:	46 f4       	brtc	.+16     	; 0x17f2 <__divmodsi4_exit>
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <__negsi2>

000017e4 <__divmodsi4_neg2>:
    17e4:	50 95       	com	r21
    17e6:	40 95       	com	r20
    17e8:	30 95       	com	r19
    17ea:	21 95       	neg	r18
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	4f 4f       	sbci	r20, 0xFF	; 255
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255

000017f2 <__divmodsi4_exit>:
    17f2:	08 95       	ret

000017f4 <__negsi2>:
    17f4:	90 95       	com	r25
    17f6:	80 95       	com	r24
    17f8:	70 95       	com	r23
    17fa:	61 95       	neg	r22
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	08 95       	ret

00001804 <__tablejump2__>:
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31

00001808 <__tablejump__>:
    1808:	05 90       	lpm	r0, Z+
    180a:	f4 91       	lpm	r31, Z
    180c:	e0 2d       	mov	r30, r0
    180e:	19 94       	eijmp

00001810 <__mulshisi3>:
    1810:	b7 ff       	sbrs	r27, 7
    1812:	3a c0       	rjmp	.+116    	; 0x1888 <__muluhisi3>

00001814 <__mulohisi3>:
    1814:	39 d0       	rcall	.+114    	; 0x1888 <__muluhisi3>
    1816:	82 1b       	sub	r24, r18
    1818:	93 0b       	sbc	r25, r19
    181a:	08 95       	ret

0000181c <__udivmodhi4>:
    181c:	aa 1b       	sub	r26, r26
    181e:	bb 1b       	sub	r27, r27
    1820:	51 e1       	ldi	r21, 0x11	; 17
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <__udivmodhi4_ep>

00001824 <__udivmodhi4_loop>:
    1824:	aa 1f       	adc	r26, r26
    1826:	bb 1f       	adc	r27, r27
    1828:	a6 17       	cp	r26, r22
    182a:	b7 07       	cpc	r27, r23
    182c:	10 f0       	brcs	.+4      	; 0x1832 <__udivmodhi4_ep>
    182e:	a6 1b       	sub	r26, r22
    1830:	b7 0b       	sbc	r27, r23

00001832 <__udivmodhi4_ep>:
    1832:	88 1f       	adc	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	5a 95       	dec	r21
    1838:	a9 f7       	brne	.-22     	; 0x1824 <__udivmodhi4_loop>
    183a:	80 95       	com	r24
    183c:	90 95       	com	r25
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	08 95       	ret

00001844 <__udivmodsi4>:
    1844:	a1 e2       	ldi	r26, 0x21	; 33
    1846:	1a 2e       	mov	r1, r26
    1848:	aa 1b       	sub	r26, r26
    184a:	bb 1b       	sub	r27, r27
    184c:	fd 01       	movw	r30, r26
    184e:	0d c0       	rjmp	.+26     	; 0x186a <__udivmodsi4_ep>

00001850 <__udivmodsi4_loop>:
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	ee 1f       	adc	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	a2 17       	cp	r26, r18
    185a:	b3 07       	cpc	r27, r19
    185c:	e4 07       	cpc	r30, r20
    185e:	f5 07       	cpc	r31, r21
    1860:	20 f0       	brcs	.+8      	; 0x186a <__udivmodsi4_ep>
    1862:	a2 1b       	sub	r26, r18
    1864:	b3 0b       	sbc	r27, r19
    1866:	e4 0b       	sbc	r30, r20
    1868:	f5 0b       	sbc	r31, r21

0000186a <__udivmodsi4_ep>:
    186a:	66 1f       	adc	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	1a 94       	dec	r1
    1874:	69 f7       	brne	.-38     	; 0x1850 <__udivmodsi4_loop>
    1876:	60 95       	com	r22
    1878:	70 95       	com	r23
    187a:	80 95       	com	r24
    187c:	90 95       	com	r25
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	bd 01       	movw	r22, r26
    1884:	cf 01       	movw	r24, r30
    1886:	08 95       	ret

00001888 <__muluhisi3>:
    1888:	09 d0       	rcall	.+18     	; 0x189c <__umulhisi3>
    188a:	a5 9f       	mul	r26, r21
    188c:	90 0d       	add	r25, r0
    188e:	b4 9f       	mul	r27, r20
    1890:	90 0d       	add	r25, r0
    1892:	a4 9f       	mul	r26, r20
    1894:	80 0d       	add	r24, r0
    1896:	91 1d       	adc	r25, r1
    1898:	11 24       	eor	r1, r1
    189a:	08 95       	ret

0000189c <__umulhisi3>:
    189c:	a2 9f       	mul	r26, r18
    189e:	b0 01       	movw	r22, r0
    18a0:	b3 9f       	mul	r27, r19
    18a2:	c0 01       	movw	r24, r0
    18a4:	a3 9f       	mul	r26, r19
    18a6:	70 0d       	add	r23, r0
    18a8:	81 1d       	adc	r24, r1
    18aa:	11 24       	eor	r1, r1
    18ac:	91 1d       	adc	r25, r1
    18ae:	b2 9f       	mul	r27, r18
    18b0:	70 0d       	add	r23, r0
    18b2:	81 1d       	adc	r24, r1
    18b4:	11 24       	eor	r1, r1
    18b6:	91 1d       	adc	r25, r1
    18b8:	08 95       	ret

000018ba <malloc>:
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	91 05       	cpc	r25, r1
    18c2:	10 f4       	brcc	.+4      	; 0x18c8 <malloc+0xe>
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	e0 91 80 05 	lds	r30, 0x0580
    18cc:	f0 91 81 05 	lds	r31, 0x0581
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	a0 e0       	ldi	r26, 0x00	; 0
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	30 97       	sbiw	r30, 0x00	; 0
    18da:	39 f1       	breq	.+78     	; 0x192a <malloc+0x70>
    18dc:	40 81       	ld	r20, Z
    18de:	51 81       	ldd	r21, Z+1	; 0x01
    18e0:	48 17       	cp	r20, r24
    18e2:	59 07       	cpc	r21, r25
    18e4:	b8 f0       	brcs	.+46     	; 0x1914 <malloc+0x5a>
    18e6:	48 17       	cp	r20, r24
    18e8:	59 07       	cpc	r21, r25
    18ea:	71 f4       	brne	.+28     	; 0x1908 <malloc+0x4e>
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	10 97       	sbiw	r26, 0x00	; 0
    18f2:	29 f0       	breq	.+10     	; 0x18fe <malloc+0x44>
    18f4:	13 96       	adiw	r26, 0x03	; 3
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
    18fa:	12 97       	sbiw	r26, 0x02	; 2
    18fc:	2c c0       	rjmp	.+88     	; 0x1956 <malloc+0x9c>
    18fe:	90 93 81 05 	sts	0x0581, r25
    1902:	80 93 80 05 	sts	0x0580, r24
    1906:	27 c0       	rjmp	.+78     	; 0x1956 <malloc+0x9c>
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	31 f0       	breq	.+12     	; 0x191a <malloc+0x60>
    190e:	42 17       	cp	r20, r18
    1910:	53 07       	cpc	r21, r19
    1912:	18 f0       	brcs	.+6      	; 0x191a <malloc+0x60>
    1914:	a9 01       	movw	r20, r18
    1916:	db 01       	movw	r26, r22
    1918:	01 c0       	rjmp	.+2      	; 0x191c <malloc+0x62>
    191a:	ef 01       	movw	r28, r30
    191c:	9a 01       	movw	r18, r20
    191e:	bd 01       	movw	r22, r26
    1920:	df 01       	movw	r26, r30
    1922:	02 80       	ldd	r0, Z+2	; 0x02
    1924:	f3 81       	ldd	r31, Z+3	; 0x03
    1926:	e0 2d       	mov	r30, r0
    1928:	d7 cf       	rjmp	.-82     	; 0x18d8 <malloc+0x1e>
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	f9 f0       	breq	.+62     	; 0x196e <malloc+0xb4>
    1930:	28 1b       	sub	r18, r24
    1932:	39 0b       	sbc	r19, r25
    1934:	24 30       	cpi	r18, 0x04	; 4
    1936:	31 05       	cpc	r19, r1
    1938:	80 f4       	brcc	.+32     	; 0x195a <malloc+0xa0>
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	9b 81       	ldd	r25, Y+3	; 0x03
    193e:	61 15       	cp	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	21 f0       	breq	.+8      	; 0x194c <malloc+0x92>
    1944:	fb 01       	movw	r30, r22
    1946:	93 83       	std	Z+3, r25	; 0x03
    1948:	82 83       	std	Z+2, r24	; 0x02
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <malloc+0x9a>
    194c:	90 93 81 05 	sts	0x0581, r25
    1950:	80 93 80 05 	sts	0x0580, r24
    1954:	fe 01       	movw	r30, r28
    1956:	32 96       	adiw	r30, 0x02	; 2
    1958:	44 c0       	rjmp	.+136    	; 0x19e2 <malloc+0x128>
    195a:	fe 01       	movw	r30, r28
    195c:	e2 0f       	add	r30, r18
    195e:	f3 1f       	adc	r31, r19
    1960:	81 93       	st	Z+, r24
    1962:	91 93       	st	Z+, r25
    1964:	22 50       	subi	r18, 0x02	; 2
    1966:	31 09       	sbc	r19, r1
    1968:	39 83       	std	Y+1, r19	; 0x01
    196a:	28 83       	st	Y, r18
    196c:	3a c0       	rjmp	.+116    	; 0x19e2 <malloc+0x128>
    196e:	20 91 7e 05 	lds	r18, 0x057E
    1972:	30 91 7f 05 	lds	r19, 0x057F
    1976:	23 2b       	or	r18, r19
    1978:	41 f4       	brne	.+16     	; 0x198a <malloc+0xd0>
    197a:	20 91 02 02 	lds	r18, 0x0202
    197e:	30 91 03 02 	lds	r19, 0x0203
    1982:	30 93 7f 05 	sts	0x057F, r19
    1986:	20 93 7e 05 	sts	0x057E, r18
    198a:	20 91 00 02 	lds	r18, 0x0200
    198e:	30 91 01 02 	lds	r19, 0x0201
    1992:	21 15       	cp	r18, r1
    1994:	31 05       	cpc	r19, r1
    1996:	41 f4       	brne	.+16     	; 0x19a8 <malloc+0xee>
    1998:	2d b7       	in	r18, 0x3d	; 61
    199a:	3e b7       	in	r19, 0x3e	; 62
    199c:	40 91 04 02 	lds	r20, 0x0204
    19a0:	50 91 05 02 	lds	r21, 0x0205
    19a4:	24 1b       	sub	r18, r20
    19a6:	35 0b       	sbc	r19, r21
    19a8:	e0 91 7e 05 	lds	r30, 0x057E
    19ac:	f0 91 7f 05 	lds	r31, 0x057F
    19b0:	e2 17       	cp	r30, r18
    19b2:	f3 07       	cpc	r31, r19
    19b4:	a0 f4       	brcc	.+40     	; 0x19de <malloc+0x124>
    19b6:	2e 1b       	sub	r18, r30
    19b8:	3f 0b       	sbc	r19, r31
    19ba:	28 17       	cp	r18, r24
    19bc:	39 07       	cpc	r19, r25
    19be:	78 f0       	brcs	.+30     	; 0x19de <malloc+0x124>
    19c0:	ac 01       	movw	r20, r24
    19c2:	4e 5f       	subi	r20, 0xFE	; 254
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	24 17       	cp	r18, r20
    19c8:	35 07       	cpc	r19, r21
    19ca:	48 f0       	brcs	.+18     	; 0x19de <malloc+0x124>
    19cc:	4e 0f       	add	r20, r30
    19ce:	5f 1f       	adc	r21, r31
    19d0:	50 93 7f 05 	sts	0x057F, r21
    19d4:	40 93 7e 05 	sts	0x057E, r20
    19d8:	81 93       	st	Z+, r24
    19da:	91 93       	st	Z+, r25
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <malloc+0x128>
    19de:	e0 e0       	ldi	r30, 0x00	; 0
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	cf 01       	movw	r24, r30
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <free>:
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <free+0xa>
    19f2:	87 c0       	rjmp	.+270    	; 0x1b02 <free+0x118>
    19f4:	fc 01       	movw	r30, r24
    19f6:	32 97       	sbiw	r30, 0x02	; 2
    19f8:	13 82       	std	Z+3, r1	; 0x03
    19fa:	12 82       	std	Z+2, r1	; 0x02
    19fc:	c0 91 80 05 	lds	r28, 0x0580
    1a00:	d0 91 81 05 	lds	r29, 0x0581
    1a04:	20 97       	sbiw	r28, 0x00	; 0
    1a06:	81 f4       	brne	.+32     	; 0x1a28 <free+0x3e>
    1a08:	20 81       	ld	r18, Z
    1a0a:	31 81       	ldd	r19, Z+1	; 0x01
    1a0c:	28 0f       	add	r18, r24
    1a0e:	39 1f       	adc	r19, r25
    1a10:	80 91 7e 05 	lds	r24, 0x057E
    1a14:	90 91 7f 05 	lds	r25, 0x057F
    1a18:	82 17       	cp	r24, r18
    1a1a:	93 07       	cpc	r25, r19
    1a1c:	79 f5       	brne	.+94     	; 0x1a7c <free+0x92>
    1a1e:	f0 93 7f 05 	sts	0x057F, r31
    1a22:	e0 93 7e 05 	sts	0x057E, r30
    1a26:	6d c0       	rjmp	.+218    	; 0x1b02 <free+0x118>
    1a28:	de 01       	movw	r26, r28
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	ae 17       	cp	r26, r30
    1a30:	bf 07       	cpc	r27, r31
    1a32:	50 f4       	brcc	.+20     	; 0x1a48 <free+0x5e>
    1a34:	12 96       	adiw	r26, 0x02	; 2
    1a36:	4d 91       	ld	r20, X+
    1a38:	5c 91       	ld	r21, X
    1a3a:	13 97       	sbiw	r26, 0x03	; 3
    1a3c:	9d 01       	movw	r18, r26
    1a3e:	41 15       	cp	r20, r1
    1a40:	51 05       	cpc	r21, r1
    1a42:	09 f1       	breq	.+66     	; 0x1a86 <free+0x9c>
    1a44:	da 01       	movw	r26, r20
    1a46:	f3 cf       	rjmp	.-26     	; 0x1a2e <free+0x44>
    1a48:	b3 83       	std	Z+3, r27	; 0x03
    1a4a:	a2 83       	std	Z+2, r26	; 0x02
    1a4c:	40 81       	ld	r20, Z
    1a4e:	51 81       	ldd	r21, Z+1	; 0x01
    1a50:	84 0f       	add	r24, r20
    1a52:	95 1f       	adc	r25, r21
    1a54:	8a 17       	cp	r24, r26
    1a56:	9b 07       	cpc	r25, r27
    1a58:	71 f4       	brne	.+28     	; 0x1a76 <free+0x8c>
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	11 97       	sbiw	r26, 0x01	; 1
    1a60:	84 0f       	add	r24, r20
    1a62:	95 1f       	adc	r25, r21
    1a64:	02 96       	adiw	r24, 0x02	; 2
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	12 96       	adiw	r26, 0x02	; 2
    1a6c:	8d 91       	ld	r24, X+
    1a6e:	9c 91       	ld	r25, X
    1a70:	13 97       	sbiw	r26, 0x03	; 3
    1a72:	93 83       	std	Z+3, r25	; 0x03
    1a74:	82 83       	std	Z+2, r24	; 0x02
    1a76:	21 15       	cp	r18, r1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	29 f4       	brne	.+10     	; 0x1a86 <free+0x9c>
    1a7c:	f0 93 81 05 	sts	0x0581, r31
    1a80:	e0 93 80 05 	sts	0x0580, r30
    1a84:	3e c0       	rjmp	.+124    	; 0x1b02 <free+0x118>
    1a86:	d9 01       	movw	r26, r18
    1a88:	13 96       	adiw	r26, 0x03	; 3
    1a8a:	fc 93       	st	X, r31
    1a8c:	ee 93       	st	-X, r30
    1a8e:	12 97       	sbiw	r26, 0x02	; 2
    1a90:	4d 91       	ld	r20, X+
    1a92:	5d 91       	ld	r21, X+
    1a94:	a4 0f       	add	r26, r20
    1a96:	b5 1f       	adc	r27, r21
    1a98:	ea 17       	cp	r30, r26
    1a9a:	fb 07       	cpc	r31, r27
    1a9c:	79 f4       	brne	.+30     	; 0x1abc <free+0xd2>
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	84 0f       	add	r24, r20
    1aa4:	95 1f       	adc	r25, r21
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	d9 01       	movw	r26, r18
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	9c 93       	st	X, r25
    1aae:	8e 93       	st	-X, r24
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	13 96       	adiw	r26, 0x03	; 3
    1ab6:	9c 93       	st	X, r25
    1ab8:	8e 93       	st	-X, r24
    1aba:	12 97       	sbiw	r26, 0x02	; 2
    1abc:	e0 e0       	ldi	r30, 0x00	; 0
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <free+0xe4>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ec 01       	movw	r28, r24
    1acc:	f9 cf       	rjmp	.-14     	; 0x1ac0 <free+0xd6>
    1ace:	ce 01       	movw	r24, r28
    1ad0:	02 96       	adiw	r24, 0x02	; 2
    1ad2:	28 81       	ld	r18, Y
    1ad4:	39 81       	ldd	r19, Y+1	; 0x01
    1ad6:	82 0f       	add	r24, r18
    1ad8:	93 1f       	adc	r25, r19
    1ada:	20 91 7e 05 	lds	r18, 0x057E
    1ade:	30 91 7f 05 	lds	r19, 0x057F
    1ae2:	28 17       	cp	r18, r24
    1ae4:	39 07       	cpc	r19, r25
    1ae6:	69 f4       	brne	.+26     	; 0x1b02 <free+0x118>
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <free+0x10c>
    1aec:	10 92 81 05 	sts	0x0581, r1
    1af0:	10 92 80 05 	sts	0x0580, r1
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <free+0x110>
    1af6:	13 82       	std	Z+3, r1	; 0x03
    1af8:	12 82       	std	Z+2, r1	; 0x02
    1afa:	d0 93 7f 05 	sts	0x057F, r29
    1afe:	c0 93 7e 05 	sts	0x057E, r28
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	08 95       	ret

00001b08 <fdevopen>:
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	ec 01       	movw	r28, r24
    1b12:	8b 01       	movw	r16, r22
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	31 f4       	brne	.+12     	; 0x1b24 <fdevopen+0x1c>
    1b18:	61 15       	cp	r22, r1
    1b1a:	71 05       	cpc	r23, r1
    1b1c:	19 f4       	brne	.+6      	; 0x1b24 <fdevopen+0x1c>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	37 c0       	rjmp	.+110    	; 0x1b92 <fdevopen+0x8a>
    1b24:	6e e0       	ldi	r22, 0x0E	; 14
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	68 d2       	rcall	.+1232   	; 0x1ffe <calloc>
    1b2e:	fc 01       	movw	r30, r24
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	a9 f3       	breq	.-22     	; 0x1b1e <fdevopen+0x16>
    1b34:	80 e8       	ldi	r24, 0x80	; 128
    1b36:	83 83       	std	Z+3, r24	; 0x03
    1b38:	01 15       	cp	r16, r1
    1b3a:	11 05       	cpc	r17, r1
    1b3c:	71 f0       	breq	.+28     	; 0x1b5a <fdevopen+0x52>
    1b3e:	13 87       	std	Z+11, r17	; 0x0b
    1b40:	02 87       	std	Z+10, r16	; 0x0a
    1b42:	81 e8       	ldi	r24, 0x81	; 129
    1b44:	83 83       	std	Z+3, r24	; 0x03
    1b46:	80 91 82 05 	lds	r24, 0x0582
    1b4a:	90 91 83 05 	lds	r25, 0x0583
    1b4e:	89 2b       	or	r24, r25
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <fdevopen+0x52>
    1b52:	f0 93 83 05 	sts	0x0583, r31
    1b56:	e0 93 82 05 	sts	0x0582, r30
    1b5a:	20 97       	sbiw	r28, 0x00	; 0
    1b5c:	c9 f0       	breq	.+50     	; 0x1b90 <fdevopen+0x88>
    1b5e:	d1 87       	std	Z+9, r29	; 0x09
    1b60:	c0 87       	std	Z+8, r28	; 0x08
    1b62:	83 81       	ldd	r24, Z+3	; 0x03
    1b64:	82 60       	ori	r24, 0x02	; 2
    1b66:	83 83       	std	Z+3, r24	; 0x03
    1b68:	80 91 84 05 	lds	r24, 0x0584
    1b6c:	90 91 85 05 	lds	r25, 0x0585
    1b70:	89 2b       	or	r24, r25
    1b72:	71 f4       	brne	.+28     	; 0x1b90 <fdevopen+0x88>
    1b74:	f0 93 85 05 	sts	0x0585, r31
    1b78:	e0 93 84 05 	sts	0x0584, r30
    1b7c:	80 91 86 05 	lds	r24, 0x0586
    1b80:	90 91 87 05 	lds	r25, 0x0587
    1b84:	89 2b       	or	r24, r25
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <fdevopen+0x88>
    1b88:	f0 93 87 05 	sts	0x0587, r31
    1b8c:	e0 93 86 05 	sts	0x0586, r30
    1b90:	cf 01       	movw	r24, r30
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret

00001b9c <printf>:
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	36 96       	adiw	r30, 0x06	; 6
    1ba8:	61 91       	ld	r22, Z+
    1baa:	71 91       	ld	r23, Z+
    1bac:	af 01       	movw	r20, r30
    1bae:	80 91 84 05 	lds	r24, 0x0584
    1bb2:	90 91 85 05 	lds	r25, 0x0585
    1bb6:	35 d0       	rcall	.+106    	; 0x1c22 <vfprintf>
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <putchar>:
    1bbe:	60 91 84 05 	lds	r22, 0x0584
    1bc2:	70 91 85 05 	lds	r23, 0x0585
    1bc6:	52 c2       	rjmp	.+1188   	; 0x206c <fputc>

00001bc8 <puts>:
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	e0 91 84 05 	lds	r30, 0x0584
    1bd4:	f0 91 85 05 	lds	r31, 0x0585
    1bd8:	23 81       	ldd	r18, Z+3	; 0x03
    1bda:	21 ff       	sbrs	r18, 1
    1bdc:	1b c0       	rjmp	.+54     	; 0x1c14 <puts+0x4c>
    1bde:	ec 01       	movw	r28, r24
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	10 e0       	ldi	r17, 0x00	; 0
    1be4:	89 91       	ld	r24, Y+
    1be6:	60 91 84 05 	lds	r22, 0x0584
    1bea:	70 91 85 05 	lds	r23, 0x0585
    1bee:	db 01       	movw	r26, r22
    1bf0:	18 96       	adiw	r26, 0x08	; 8
    1bf2:	ed 91       	ld	r30, X+
    1bf4:	fc 91       	ld	r31, X
    1bf6:	19 97       	sbiw	r26, 0x09	; 9
    1bf8:	88 23       	and	r24, r24
    1bfa:	31 f0       	breq	.+12     	; 0x1c08 <puts+0x40>
    1bfc:	19 95       	eicall
    1bfe:	89 2b       	or	r24, r25
    1c00:	89 f3       	breq	.-30     	; 0x1be4 <puts+0x1c>
    1c02:	0f ef       	ldi	r16, 0xFF	; 255
    1c04:	1f ef       	ldi	r17, 0xFF	; 255
    1c06:	ee cf       	rjmp	.-36     	; 0x1be4 <puts+0x1c>
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	19 95       	eicall
    1c0c:	89 2b       	or	r24, r25
    1c0e:	11 f4       	brne	.+4      	; 0x1c14 <puts+0x4c>
    1c10:	c8 01       	movw	r24, r16
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <puts+0x50>
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	9f ef       	ldi	r25, 0xFF	; 255
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <vfprintf>:
    1c22:	2f 92       	push	r2
    1c24:	3f 92       	push	r3
    1c26:	4f 92       	push	r4
    1c28:	5f 92       	push	r5
    1c2a:	6f 92       	push	r6
    1c2c:	7f 92       	push	r7
    1c2e:	8f 92       	push	r8
    1c30:	9f 92       	push	r9
    1c32:	af 92       	push	r10
    1c34:	bf 92       	push	r11
    1c36:	cf 92       	push	r12
    1c38:	df 92       	push	r13
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	0f 93       	push	r16
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	7c 01       	movw	r14, r24
    1c58:	6b 01       	movw	r12, r22
    1c5a:	8a 01       	movw	r16, r20
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	17 82       	std	Z+7, r1	; 0x07
    1c60:	16 82       	std	Z+6, r1	; 0x06
    1c62:	83 81       	ldd	r24, Z+3	; 0x03
    1c64:	81 ff       	sbrs	r24, 1
    1c66:	b0 c1       	rjmp	.+864    	; 0x1fc8 <vfprintf+0x3a6>
    1c68:	ce 01       	movw	r24, r28
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	4c 01       	movw	r8, r24
    1c6e:	f7 01       	movw	r30, r14
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	f6 01       	movw	r30, r12
    1c74:	93 fd       	sbrc	r25, 3
    1c76:	85 91       	lpm	r24, Z+
    1c78:	93 ff       	sbrs	r25, 3
    1c7a:	81 91       	ld	r24, Z+
    1c7c:	6f 01       	movw	r12, r30
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <vfprintf+0x62>
    1c82:	9e c1       	rjmp	.+828    	; 0x1fc0 <vfprintf+0x39e>
    1c84:	85 32       	cpi	r24, 0x25	; 37
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <vfprintf+0x74>
    1c88:	93 fd       	sbrc	r25, 3
    1c8a:	85 91       	lpm	r24, Z+
    1c8c:	93 ff       	sbrs	r25, 3
    1c8e:	81 91       	ld	r24, Z+
    1c90:	6f 01       	movw	r12, r30
    1c92:	85 32       	cpi	r24, 0x25	; 37
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <vfprintf+0x7c>
    1c96:	b7 01       	movw	r22, r14
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	e8 d1       	rcall	.+976    	; 0x206c <fputc>
    1c9c:	e8 cf       	rjmp	.-48     	; 0x1c6e <vfprintf+0x4c>
    1c9e:	51 2c       	mov	r5, r1
    1ca0:	31 2c       	mov	r3, r1
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	20 32       	cpi	r18, 0x20	; 32
    1ca6:	a0 f4       	brcc	.+40     	; 0x1cd0 <vfprintf+0xae>
    1ca8:	8b 32       	cpi	r24, 0x2B	; 43
    1caa:	69 f0       	breq	.+26     	; 0x1cc6 <vfprintf+0xa4>
    1cac:	30 f4       	brcc	.+12     	; 0x1cba <vfprintf+0x98>
    1cae:	80 32       	cpi	r24, 0x20	; 32
    1cb0:	59 f0       	breq	.+22     	; 0x1cc8 <vfprintf+0xa6>
    1cb2:	83 32       	cpi	r24, 0x23	; 35
    1cb4:	69 f4       	brne	.+26     	; 0x1cd0 <vfprintf+0xae>
    1cb6:	20 61       	ori	r18, 0x10	; 16
    1cb8:	2c c0       	rjmp	.+88     	; 0x1d12 <vfprintf+0xf0>
    1cba:	8d 32       	cpi	r24, 0x2D	; 45
    1cbc:	39 f0       	breq	.+14     	; 0x1ccc <vfprintf+0xaa>
    1cbe:	80 33       	cpi	r24, 0x30	; 48
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <vfprintf+0xae>
    1cc2:	21 60       	ori	r18, 0x01	; 1
    1cc4:	26 c0       	rjmp	.+76     	; 0x1d12 <vfprintf+0xf0>
    1cc6:	22 60       	ori	r18, 0x02	; 2
    1cc8:	24 60       	ori	r18, 0x04	; 4
    1cca:	23 c0       	rjmp	.+70     	; 0x1d12 <vfprintf+0xf0>
    1ccc:	28 60       	ori	r18, 0x08	; 8
    1cce:	21 c0       	rjmp	.+66     	; 0x1d12 <vfprintf+0xf0>
    1cd0:	27 fd       	sbrc	r18, 7
    1cd2:	27 c0       	rjmp	.+78     	; 0x1d22 <vfprintf+0x100>
    1cd4:	30 ed       	ldi	r19, 0xD0	; 208
    1cd6:	38 0f       	add	r19, r24
    1cd8:	3a 30       	cpi	r19, 0x0A	; 10
    1cda:	78 f4       	brcc	.+30     	; 0x1cfa <vfprintf+0xd8>
    1cdc:	26 ff       	sbrs	r18, 6
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <vfprintf+0xca>
    1ce0:	fa e0       	ldi	r31, 0x0A	; 10
    1ce2:	5f 9e       	mul	r5, r31
    1ce4:	30 0d       	add	r19, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	53 2e       	mov	r5, r19
    1cea:	13 c0       	rjmp	.+38     	; 0x1d12 <vfprintf+0xf0>
    1cec:	8a e0       	ldi	r24, 0x0A	; 10
    1cee:	38 9e       	mul	r3, r24
    1cf0:	30 0d       	add	r19, r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	33 2e       	mov	r3, r19
    1cf6:	20 62       	ori	r18, 0x20	; 32
    1cf8:	0c c0       	rjmp	.+24     	; 0x1d12 <vfprintf+0xf0>
    1cfa:	8e 32       	cpi	r24, 0x2E	; 46
    1cfc:	21 f4       	brne	.+8      	; 0x1d06 <vfprintf+0xe4>
    1cfe:	26 fd       	sbrc	r18, 6
    1d00:	5f c1       	rjmp	.+702    	; 0x1fc0 <vfprintf+0x39e>
    1d02:	20 64       	ori	r18, 0x40	; 64
    1d04:	06 c0       	rjmp	.+12     	; 0x1d12 <vfprintf+0xf0>
    1d06:	8c 36       	cpi	r24, 0x6C	; 108
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <vfprintf+0xec>
    1d0a:	20 68       	ori	r18, 0x80	; 128
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0xf0>
    1d0e:	88 36       	cpi	r24, 0x68	; 104
    1d10:	41 f4       	brne	.+16     	; 0x1d22 <vfprintf+0x100>
    1d12:	f6 01       	movw	r30, r12
    1d14:	93 fd       	sbrc	r25, 3
    1d16:	85 91       	lpm	r24, Z+
    1d18:	93 ff       	sbrs	r25, 3
    1d1a:	81 91       	ld	r24, Z+
    1d1c:	6f 01       	movw	r12, r30
    1d1e:	81 11       	cpse	r24, r1
    1d20:	c1 cf       	rjmp	.-126    	; 0x1ca4 <vfprintf+0x82>
    1d22:	98 2f       	mov	r25, r24
    1d24:	9f 7d       	andi	r25, 0xDF	; 223
    1d26:	95 54       	subi	r25, 0x45	; 69
    1d28:	93 30       	cpi	r25, 0x03	; 3
    1d2a:	28 f4       	brcc	.+10     	; 0x1d36 <vfprintf+0x114>
    1d2c:	0c 5f       	subi	r16, 0xFC	; 252
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	ff e3       	ldi	r31, 0x3F	; 63
    1d32:	f9 83       	std	Y+1, r31	; 0x01
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <vfprintf+0x12e>
    1d36:	83 36       	cpi	r24, 0x63	; 99
    1d38:	31 f0       	breq	.+12     	; 0x1d46 <vfprintf+0x124>
    1d3a:	83 37       	cpi	r24, 0x73	; 115
    1d3c:	71 f0       	breq	.+28     	; 0x1d5a <vfprintf+0x138>
    1d3e:	83 35       	cpi	r24, 0x53	; 83
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <vfprintf+0x122>
    1d42:	57 c0       	rjmp	.+174    	; 0x1df2 <vfprintf+0x1d0>
    1d44:	21 c0       	rjmp	.+66     	; 0x1d88 <vfprintf+0x166>
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 81       	ld	r24, Z
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	0e 5f       	subi	r16, 0xFE	; 254
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	44 24       	eor	r4, r4
    1d52:	43 94       	inc	r4
    1d54:	51 2c       	mov	r5, r1
    1d56:	54 01       	movw	r10, r8
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <vfprintf+0x160>
    1d5a:	38 01       	movw	r6, r16
    1d5c:	f2 e0       	ldi	r31, 0x02	; 2
    1d5e:	6f 0e       	add	r6, r31
    1d60:	71 1c       	adc	r7, r1
    1d62:	f8 01       	movw	r30, r16
    1d64:	a0 80       	ld	r10, Z
    1d66:	b1 80       	ldd	r11, Z+1	; 0x01
    1d68:	26 ff       	sbrs	r18, 6
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfprintf+0x150>
    1d6c:	65 2d       	mov	r22, r5
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x154>
    1d72:	6f ef       	ldi	r22, 0xFF	; 255
    1d74:	7f ef       	ldi	r23, 0xFF	; 255
    1d76:	c5 01       	movw	r24, r10
    1d78:	2c 87       	std	Y+12, r18	; 0x0c
    1d7a:	6d d1       	rcall	.+730    	; 0x2056 <strnlen>
    1d7c:	2c 01       	movw	r4, r24
    1d7e:	83 01       	movw	r16, r6
    1d80:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d82:	2f 77       	andi	r18, 0x7F	; 127
    1d84:	22 2e       	mov	r2, r18
    1d86:	16 c0       	rjmp	.+44     	; 0x1db4 <vfprintf+0x192>
    1d88:	38 01       	movw	r6, r16
    1d8a:	f2 e0       	ldi	r31, 0x02	; 2
    1d8c:	6f 0e       	add	r6, r31
    1d8e:	71 1c       	adc	r7, r1
    1d90:	f8 01       	movw	r30, r16
    1d92:	a0 80       	ld	r10, Z
    1d94:	b1 80       	ldd	r11, Z+1	; 0x01
    1d96:	26 ff       	sbrs	r18, 6
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <vfprintf+0x17e>
    1d9a:	65 2d       	mov	r22, r5
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <vfprintf+0x182>
    1da0:	6f ef       	ldi	r22, 0xFF	; 255
    1da2:	7f ef       	ldi	r23, 0xFF	; 255
    1da4:	c5 01       	movw	r24, r10
    1da6:	2c 87       	std	Y+12, r18	; 0x0c
    1da8:	44 d1       	rcall	.+648    	; 0x2032 <strnlen_P>
    1daa:	2c 01       	movw	r4, r24
    1dac:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dae:	20 68       	ori	r18, 0x80	; 128
    1db0:	22 2e       	mov	r2, r18
    1db2:	83 01       	movw	r16, r6
    1db4:	23 fc       	sbrc	r2, 3
    1db6:	19 c0       	rjmp	.+50     	; 0x1dea <vfprintf+0x1c8>
    1db8:	83 2d       	mov	r24, r3
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	48 16       	cp	r4, r24
    1dbe:	59 06       	cpc	r5, r25
    1dc0:	a0 f4       	brcc	.+40     	; 0x1dea <vfprintf+0x1c8>
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	51 d1       	rcall	.+674    	; 0x206c <fputc>
    1dca:	3a 94       	dec	r3
    1dcc:	f5 cf       	rjmp	.-22     	; 0x1db8 <vfprintf+0x196>
    1dce:	f5 01       	movw	r30, r10
    1dd0:	27 fc       	sbrc	r2, 7
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	27 fe       	sbrs	r2, 7
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	5f 01       	movw	r10, r30
    1dda:	b7 01       	movw	r22, r14
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	46 d1       	rcall	.+652    	; 0x206c <fputc>
    1de0:	31 10       	cpse	r3, r1
    1de2:	3a 94       	dec	r3
    1de4:	f1 e0       	ldi	r31, 0x01	; 1
    1de6:	4f 1a       	sub	r4, r31
    1de8:	51 08       	sbc	r5, r1
    1dea:	41 14       	cp	r4, r1
    1dec:	51 04       	cpc	r5, r1
    1dee:	79 f7       	brne	.-34     	; 0x1dce <vfprintf+0x1ac>
    1df0:	de c0       	rjmp	.+444    	; 0x1fae <vfprintf+0x38c>
    1df2:	84 36       	cpi	r24, 0x64	; 100
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <vfprintf+0x1d8>
    1df6:	89 36       	cpi	r24, 0x69	; 105
    1df8:	31 f5       	brne	.+76     	; 0x1e46 <vfprintf+0x224>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	27 ff       	sbrs	r18, 7
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <vfprintf+0x1ec>
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	0c 5f       	subi	r16, 0xFC	; 252
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	08 c0       	rjmp	.+16     	; 0x1e1e <vfprintf+0x1fc>
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	88 27       	eor	r24, r24
    1e14:	77 fd       	sbrc	r23, 7
    1e16:	80 95       	com	r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	0e 5f       	subi	r16, 0xFE	; 254
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	2f 76       	andi	r18, 0x6F	; 111
    1e20:	b2 2e       	mov	r11, r18
    1e22:	97 ff       	sbrs	r25, 7
    1e24:	09 c0       	rjmp	.+18     	; 0x1e38 <vfprintf+0x216>
    1e26:	90 95       	com	r25
    1e28:	80 95       	com	r24
    1e2a:	70 95       	com	r23
    1e2c:	61 95       	neg	r22
    1e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e30:	8f 4f       	sbci	r24, 0xFF	; 255
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	20 68       	ori	r18, 0x80	; 128
    1e36:	b2 2e       	mov	r11, r18
    1e38:	2a e0       	ldi	r18, 0x0A	; 10
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	a4 01       	movw	r20, r8
    1e3e:	48 d1       	rcall	.+656    	; 0x20d0 <__ultoa_invert>
    1e40:	a8 2e       	mov	r10, r24
    1e42:	a8 18       	sub	r10, r8
    1e44:	43 c0       	rjmp	.+134    	; 0x1ecc <vfprintf+0x2aa>
    1e46:	85 37       	cpi	r24, 0x75	; 117
    1e48:	29 f4       	brne	.+10     	; 0x1e54 <vfprintf+0x232>
    1e4a:	2f 7e       	andi	r18, 0xEF	; 239
    1e4c:	b2 2e       	mov	r11, r18
    1e4e:	2a e0       	ldi	r18, 0x0A	; 10
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	25 c0       	rjmp	.+74     	; 0x1e9e <vfprintf+0x27c>
    1e54:	f2 2f       	mov	r31, r18
    1e56:	f9 7f       	andi	r31, 0xF9	; 249
    1e58:	bf 2e       	mov	r11, r31
    1e5a:	8f 36       	cpi	r24, 0x6F	; 111
    1e5c:	c1 f0       	breq	.+48     	; 0x1e8e <vfprintf+0x26c>
    1e5e:	18 f4       	brcc	.+6      	; 0x1e66 <vfprintf+0x244>
    1e60:	88 35       	cpi	r24, 0x58	; 88
    1e62:	79 f0       	breq	.+30     	; 0x1e82 <vfprintf+0x260>
    1e64:	ad c0       	rjmp	.+346    	; 0x1fc0 <vfprintf+0x39e>
    1e66:	80 37       	cpi	r24, 0x70	; 112
    1e68:	19 f0       	breq	.+6      	; 0x1e70 <vfprintf+0x24e>
    1e6a:	88 37       	cpi	r24, 0x78	; 120
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <vfprintf+0x254>
    1e6e:	a8 c0       	rjmp	.+336    	; 0x1fc0 <vfprintf+0x39e>
    1e70:	2f 2f       	mov	r18, r31
    1e72:	20 61       	ori	r18, 0x10	; 16
    1e74:	b2 2e       	mov	r11, r18
    1e76:	b4 fe       	sbrs	r11, 4
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <vfprintf+0x272>
    1e7a:	8b 2d       	mov	r24, r11
    1e7c:	84 60       	ori	r24, 0x04	; 4
    1e7e:	b8 2e       	mov	r11, r24
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <vfprintf+0x272>
    1e82:	24 ff       	sbrs	r18, 4
    1e84:	0a c0       	rjmp	.+20     	; 0x1e9a <vfprintf+0x278>
    1e86:	9f 2f       	mov	r25, r31
    1e88:	96 60       	ori	r25, 0x06	; 6
    1e8a:	b9 2e       	mov	r11, r25
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <vfprintf+0x278>
    1e8e:	28 e0       	ldi	r18, 0x08	; 8
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <vfprintf+0x27c>
    1e94:	20 e1       	ldi	r18, 0x10	; 16
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <vfprintf+0x27c>
    1e9a:	20 e1       	ldi	r18, 0x10	; 16
    1e9c:	32 e0       	ldi	r19, 0x02	; 2
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	b7 fe       	sbrs	r11, 7
    1ea2:	07 c0       	rjmp	.+14     	; 0x1eb2 <vfprintf+0x290>
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	0c 5f       	subi	r16, 0xFC	; 252
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	06 c0       	rjmp	.+12     	; 0x1ebe <vfprintf+0x29c>
    1eb2:	60 81       	ld	r22, Z
    1eb4:	71 81       	ldd	r23, Z+1	; 0x01
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 5f       	subi	r16, 0xFE	; 254
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	a4 01       	movw	r20, r8
    1ec0:	07 d1       	rcall	.+526    	; 0x20d0 <__ultoa_invert>
    1ec2:	a8 2e       	mov	r10, r24
    1ec4:	a8 18       	sub	r10, r8
    1ec6:	fb 2d       	mov	r31, r11
    1ec8:	ff 77       	andi	r31, 0x7F	; 127
    1eca:	bf 2e       	mov	r11, r31
    1ecc:	b6 fe       	sbrs	r11, 6
    1ece:	0b c0       	rjmp	.+22     	; 0x1ee6 <vfprintf+0x2c4>
    1ed0:	2b 2d       	mov	r18, r11
    1ed2:	2e 7f       	andi	r18, 0xFE	; 254
    1ed4:	a5 14       	cp	r10, r5
    1ed6:	50 f4       	brcc	.+20     	; 0x1eec <vfprintf+0x2ca>
    1ed8:	b4 fe       	sbrs	r11, 4
    1eda:	0a c0       	rjmp	.+20     	; 0x1ef0 <vfprintf+0x2ce>
    1edc:	b2 fc       	sbrc	r11, 2
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <vfprintf+0x2ce>
    1ee0:	2b 2d       	mov	r18, r11
    1ee2:	2e 7e       	andi	r18, 0xEE	; 238
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <vfprintf+0x2ce>
    1ee6:	7a 2c       	mov	r7, r10
    1ee8:	2b 2d       	mov	r18, r11
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <vfprintf+0x2d0>
    1eec:	7a 2c       	mov	r7, r10
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <vfprintf+0x2d0>
    1ef0:	75 2c       	mov	r7, r5
    1ef2:	24 ff       	sbrs	r18, 4
    1ef4:	0d c0       	rjmp	.+26     	; 0x1f10 <vfprintf+0x2ee>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ea 0d       	add	r30, r10
    1efa:	f1 1d       	adc	r31, r1
    1efc:	80 81       	ld	r24, Z
    1efe:	80 33       	cpi	r24, 0x30	; 48
    1f00:	11 f4       	brne	.+4      	; 0x1f06 <vfprintf+0x2e4>
    1f02:	29 7e       	andi	r18, 0xE9	; 233
    1f04:	09 c0       	rjmp	.+18     	; 0x1f18 <vfprintf+0x2f6>
    1f06:	22 ff       	sbrs	r18, 2
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <vfprintf+0x2f4>
    1f0a:	73 94       	inc	r7
    1f0c:	73 94       	inc	r7
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <vfprintf+0x2f6>
    1f10:	82 2f       	mov	r24, r18
    1f12:	86 78       	andi	r24, 0x86	; 134
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <vfprintf+0x2f6>
    1f16:	73 94       	inc	r7
    1f18:	23 fd       	sbrc	r18, 3
    1f1a:	12 c0       	rjmp	.+36     	; 0x1f40 <vfprintf+0x31e>
    1f1c:	20 ff       	sbrs	r18, 0
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <vfprintf+0x30a>
    1f20:	5a 2c       	mov	r5, r10
    1f22:	73 14       	cp	r7, r3
    1f24:	18 f4       	brcc	.+6      	; 0x1f2c <vfprintf+0x30a>
    1f26:	53 0c       	add	r5, r3
    1f28:	57 18       	sub	r5, r7
    1f2a:	73 2c       	mov	r7, r3
    1f2c:	73 14       	cp	r7, r3
    1f2e:	60 f4       	brcc	.+24     	; 0x1f48 <vfprintf+0x326>
    1f30:	b7 01       	movw	r22, r14
    1f32:	80 e2       	ldi	r24, 0x20	; 32
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	2c 87       	std	Y+12, r18	; 0x0c
    1f38:	99 d0       	rcall	.+306    	; 0x206c <fputc>
    1f3a:	73 94       	inc	r7
    1f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <vfprintf+0x30a>
    1f40:	73 14       	cp	r7, r3
    1f42:	10 f4       	brcc	.+4      	; 0x1f48 <vfprintf+0x326>
    1f44:	37 18       	sub	r3, r7
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <vfprintf+0x328>
    1f48:	31 2c       	mov	r3, r1
    1f4a:	24 ff       	sbrs	r18, 4
    1f4c:	11 c0       	rjmp	.+34     	; 0x1f70 <vfprintf+0x34e>
    1f4e:	b7 01       	movw	r22, r14
    1f50:	80 e3       	ldi	r24, 0x30	; 48
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	2c 87       	std	Y+12, r18	; 0x0c
    1f56:	8a d0       	rcall	.+276    	; 0x206c <fputc>
    1f58:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f5a:	22 ff       	sbrs	r18, 2
    1f5c:	16 c0       	rjmp	.+44     	; 0x1f8a <vfprintf+0x368>
    1f5e:	21 ff       	sbrs	r18, 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <vfprintf+0x346>
    1f62:	88 e5       	ldi	r24, 0x58	; 88
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x34a>
    1f68:	88 e7       	ldi	r24, 0x78	; 120
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	0c c0       	rjmp	.+24     	; 0x1f88 <vfprintf+0x366>
    1f70:	82 2f       	mov	r24, r18
    1f72:	86 78       	andi	r24, 0x86	; 134
    1f74:	51 f0       	breq	.+20     	; 0x1f8a <vfprintf+0x368>
    1f76:	21 fd       	sbrc	r18, 1
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0x35c>
    1f7a:	80 e2       	ldi	r24, 0x20	; 32
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <vfprintf+0x35e>
    1f7e:	8b e2       	ldi	r24, 0x2B	; 43
    1f80:	27 fd       	sbrc	r18, 7
    1f82:	8d e2       	ldi	r24, 0x2D	; 45
    1f84:	b7 01       	movw	r22, r14
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	71 d0       	rcall	.+226    	; 0x206c <fputc>
    1f8a:	a5 14       	cp	r10, r5
    1f8c:	30 f4       	brcc	.+12     	; 0x1f9a <vfprintf+0x378>
    1f8e:	b7 01       	movw	r22, r14
    1f90:	80 e3       	ldi	r24, 0x30	; 48
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	6b d0       	rcall	.+214    	; 0x206c <fputc>
    1f96:	5a 94       	dec	r5
    1f98:	f8 cf       	rjmp	.-16     	; 0x1f8a <vfprintf+0x368>
    1f9a:	aa 94       	dec	r10
    1f9c:	f4 01       	movw	r30, r8
    1f9e:	ea 0d       	add	r30, r10
    1fa0:	f1 1d       	adc	r31, r1
    1fa2:	80 81       	ld	r24, Z
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	61 d0       	rcall	.+194    	; 0x206c <fputc>
    1faa:	a1 10       	cpse	r10, r1
    1fac:	f6 cf       	rjmp	.-20     	; 0x1f9a <vfprintf+0x378>
    1fae:	33 20       	and	r3, r3
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <vfprintf+0x392>
    1fb2:	5d ce       	rjmp	.-838    	; 0x1c6e <vfprintf+0x4c>
    1fb4:	b7 01       	movw	r22, r14
    1fb6:	80 e2       	ldi	r24, 0x20	; 32
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	58 d0       	rcall	.+176    	; 0x206c <fputc>
    1fbc:	3a 94       	dec	r3
    1fbe:	f7 cf       	rjmp	.-18     	; 0x1fae <vfprintf+0x38c>
    1fc0:	f7 01       	movw	r30, r14
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	97 81       	ldd	r25, Z+7	; 0x07
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x3aa>
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	9f ef       	ldi	r25, 0xFF	; 255
    1fcc:	2c 96       	adiw	r28, 0x0c	; 12
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	bf 90       	pop	r11
    1fea:	af 90       	pop	r10
    1fec:	9f 90       	pop	r9
    1fee:	8f 90       	pop	r8
    1ff0:	7f 90       	pop	r7
    1ff2:	6f 90       	pop	r6
    1ff4:	5f 90       	pop	r5
    1ff6:	4f 90       	pop	r4
    1ff8:	3f 90       	pop	r3
    1ffa:	2f 90       	pop	r2
    1ffc:	08 95       	ret

00001ffe <calloc>:
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	86 9f       	mul	r24, r22
    2008:	80 01       	movw	r16, r0
    200a:	87 9f       	mul	r24, r23
    200c:	10 0d       	add	r17, r0
    200e:	96 9f       	mul	r25, r22
    2010:	10 0d       	add	r17, r0
    2012:	11 24       	eor	r1, r1
    2014:	c8 01       	movw	r24, r16
    2016:	51 dc       	rcall	.-1886   	; 0x18ba <malloc>
    2018:	ec 01       	movw	r28, r24
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	21 f0       	breq	.+8      	; 0x2026 <calloc+0x28>
    201e:	a8 01       	movw	r20, r16
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	11 d0       	rcall	.+34     	; 0x2048 <memset>
    2026:	ce 01       	movw	r24, r28
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <strnlen_P>:
    2032:	fc 01       	movw	r30, r24
    2034:	05 90       	lpm	r0, Z+
    2036:	61 50       	subi	r22, 0x01	; 1
    2038:	70 40       	sbci	r23, 0x00	; 0
    203a:	01 10       	cpse	r0, r1
    203c:	d8 f7       	brcc	.-10     	; 0x2034 <strnlen_P+0x2>
    203e:	80 95       	com	r24
    2040:	90 95       	com	r25
    2042:	8e 0f       	add	r24, r30
    2044:	9f 1f       	adc	r25, r31
    2046:	08 95       	ret

00002048 <memset>:
    2048:	dc 01       	movw	r26, r24
    204a:	01 c0       	rjmp	.+2      	; 0x204e <memset+0x6>
    204c:	6d 93       	st	X+, r22
    204e:	41 50       	subi	r20, 0x01	; 1
    2050:	50 40       	sbci	r21, 0x00	; 0
    2052:	e0 f7       	brcc	.-8      	; 0x204c <memset+0x4>
    2054:	08 95       	ret

00002056 <strnlen>:
    2056:	fc 01       	movw	r30, r24
    2058:	61 50       	subi	r22, 0x01	; 1
    205a:	70 40       	sbci	r23, 0x00	; 0
    205c:	01 90       	ld	r0, Z+
    205e:	01 10       	cpse	r0, r1
    2060:	d8 f7       	brcc	.-10     	; 0x2058 <strnlen+0x2>
    2062:	80 95       	com	r24
    2064:	90 95       	com	r25
    2066:	8e 0f       	add	r24, r30
    2068:	9f 1f       	adc	r25, r31
    206a:	08 95       	ret

0000206c <fputc>:
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	18 2f       	mov	r17, r24
    2076:	09 2f       	mov	r16, r25
    2078:	eb 01       	movw	r28, r22
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	81 fd       	sbrc	r24, 1
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <fputc+0x1a>
    2080:	8f ef       	ldi	r24, 0xFF	; 255
    2082:	9f ef       	ldi	r25, 0xFF	; 255
    2084:	20 c0       	rjmp	.+64     	; 0x20c6 <fputc+0x5a>
    2086:	82 ff       	sbrs	r24, 2
    2088:	10 c0       	rjmp	.+32     	; 0x20aa <fputc+0x3e>
    208a:	4e 81       	ldd	r20, Y+6	; 0x06
    208c:	5f 81       	ldd	r21, Y+7	; 0x07
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	42 17       	cp	r20, r18
    2094:	53 07       	cpc	r21, r19
    2096:	7c f4       	brge	.+30     	; 0x20b6 <fputc+0x4a>
    2098:	e8 81       	ld	r30, Y
    209a:	f9 81       	ldd	r31, Y+1	; 0x01
    209c:	9f 01       	movw	r18, r30
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	39 83       	std	Y+1, r19	; 0x01
    20a4:	28 83       	st	Y, r18
    20a6:	10 83       	st	Z, r17
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <fputc+0x4a>
    20aa:	e8 85       	ldd	r30, Y+8	; 0x08
    20ac:	f9 85       	ldd	r31, Y+9	; 0x09
    20ae:	81 2f       	mov	r24, r17
    20b0:	19 95       	eicall
    20b2:	89 2b       	or	r24, r25
    20b4:	29 f7       	brne	.-54     	; 0x2080 <fputc+0x14>
    20b6:	2e 81       	ldd	r18, Y+6	; 0x06
    20b8:	3f 81       	ldd	r19, Y+7	; 0x07
    20ba:	2f 5f       	subi	r18, 0xFF	; 255
    20bc:	3f 4f       	sbci	r19, 0xFF	; 255
    20be:	3f 83       	std	Y+7, r19	; 0x07
    20c0:	2e 83       	std	Y+6, r18	; 0x06
    20c2:	81 2f       	mov	r24, r17
    20c4:	90 2f       	mov	r25, r16
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	08 95       	ret

000020d0 <__ultoa_invert>:
    20d0:	fa 01       	movw	r30, r20
    20d2:	aa 27       	eor	r26, r26
    20d4:	28 30       	cpi	r18, 0x08	; 8
    20d6:	51 f1       	breq	.+84     	; 0x212c <__ultoa_invert+0x5c>
    20d8:	20 31       	cpi	r18, 0x10	; 16
    20da:	81 f1       	breq	.+96     	; 0x213c <__ultoa_invert+0x6c>
    20dc:	e8 94       	clt
    20de:	6f 93       	push	r22
    20e0:	6e 7f       	andi	r22, 0xFE	; 254
    20e2:	6e 5f       	subi	r22, 0xFE	; 254
    20e4:	7f 4f       	sbci	r23, 0xFF	; 255
    20e6:	8f 4f       	sbci	r24, 0xFF	; 255
    20e8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ea:	af 4f       	sbci	r26, 0xFF	; 255
    20ec:	b1 e0       	ldi	r27, 0x01	; 1
    20ee:	3e d0       	rcall	.+124    	; 0x216c <__ultoa_invert+0x9c>
    20f0:	b4 e0       	ldi	r27, 0x04	; 4
    20f2:	3c d0       	rcall	.+120    	; 0x216c <__ultoa_invert+0x9c>
    20f4:	67 0f       	add	r22, r23
    20f6:	78 1f       	adc	r23, r24
    20f8:	89 1f       	adc	r24, r25
    20fa:	9a 1f       	adc	r25, r26
    20fc:	a1 1d       	adc	r26, r1
    20fe:	68 0f       	add	r22, r24
    2100:	79 1f       	adc	r23, r25
    2102:	8a 1f       	adc	r24, r26
    2104:	91 1d       	adc	r25, r1
    2106:	a1 1d       	adc	r26, r1
    2108:	6a 0f       	add	r22, r26
    210a:	71 1d       	adc	r23, r1
    210c:	81 1d       	adc	r24, r1
    210e:	91 1d       	adc	r25, r1
    2110:	a1 1d       	adc	r26, r1
    2112:	20 d0       	rcall	.+64     	; 0x2154 <__ultoa_invert+0x84>
    2114:	09 f4       	brne	.+2      	; 0x2118 <__ultoa_invert+0x48>
    2116:	68 94       	set
    2118:	3f 91       	pop	r19
    211a:	2a e0       	ldi	r18, 0x0A	; 10
    211c:	26 9f       	mul	r18, r22
    211e:	11 24       	eor	r1, r1
    2120:	30 19       	sub	r19, r0
    2122:	30 5d       	subi	r19, 0xD0	; 208
    2124:	31 93       	st	Z+, r19
    2126:	de f6       	brtc	.-74     	; 0x20de <__ultoa_invert+0xe>
    2128:	cf 01       	movw	r24, r30
    212a:	08 95       	ret
    212c:	46 2f       	mov	r20, r22
    212e:	47 70       	andi	r20, 0x07	; 7
    2130:	40 5d       	subi	r20, 0xD0	; 208
    2132:	41 93       	st	Z+, r20
    2134:	b3 e0       	ldi	r27, 0x03	; 3
    2136:	0f d0       	rcall	.+30     	; 0x2156 <__ultoa_invert+0x86>
    2138:	c9 f7       	brne	.-14     	; 0x212c <__ultoa_invert+0x5c>
    213a:	f6 cf       	rjmp	.-20     	; 0x2128 <__ultoa_invert+0x58>
    213c:	46 2f       	mov	r20, r22
    213e:	4f 70       	andi	r20, 0x0F	; 15
    2140:	40 5d       	subi	r20, 0xD0	; 208
    2142:	4a 33       	cpi	r20, 0x3A	; 58
    2144:	18 f0       	brcs	.+6      	; 0x214c <__ultoa_invert+0x7c>
    2146:	49 5d       	subi	r20, 0xD9	; 217
    2148:	31 fd       	sbrc	r19, 1
    214a:	40 52       	subi	r20, 0x20	; 32
    214c:	41 93       	st	Z+, r20
    214e:	02 d0       	rcall	.+4      	; 0x2154 <__ultoa_invert+0x84>
    2150:	a9 f7       	brne	.-22     	; 0x213c <__ultoa_invert+0x6c>
    2152:	ea cf       	rjmp	.-44     	; 0x2128 <__ultoa_invert+0x58>
    2154:	b4 e0       	ldi	r27, 0x04	; 4
    2156:	a6 95       	lsr	r26
    2158:	97 95       	ror	r25
    215a:	87 95       	ror	r24
    215c:	77 95       	ror	r23
    215e:	67 95       	ror	r22
    2160:	ba 95       	dec	r27
    2162:	c9 f7       	brne	.-14     	; 0x2156 <__ultoa_invert+0x86>
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	61 05       	cpc	r22, r1
    2168:	71 05       	cpc	r23, r1
    216a:	08 95       	ret
    216c:	9b 01       	movw	r18, r22
    216e:	ac 01       	movw	r20, r24
    2170:	0a 2e       	mov	r0, r26
    2172:	06 94       	lsr	r0
    2174:	57 95       	ror	r21
    2176:	47 95       	ror	r20
    2178:	37 95       	ror	r19
    217a:	27 95       	ror	r18
    217c:	ba 95       	dec	r27
    217e:	c9 f7       	brne	.-14     	; 0x2172 <__ultoa_invert+0xa2>
    2180:	62 0f       	add	r22, r18
    2182:	73 1f       	adc	r23, r19
    2184:	84 1f       	adc	r24, r20
    2186:	95 1f       	adc	r25, r21
    2188:	a0 1d       	adc	r26, r0
    218a:	08 95       	ret

0000218c <_exit>:
    218c:	f8 94       	cli

0000218e <__stop_program>:
    218e:	ff cf       	rjmp	.-2      	; 0x218e <__stop_program>
